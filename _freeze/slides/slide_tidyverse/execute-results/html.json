{
  "hash": "f15cbec8ef0f62a153479ed0ff5108a8",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: \n  revealjs:\n    css: ../styles.css\n    slide-number: true\n    show-slide-number: all\n    preview-links: auto\n    self-contained: true\n    progress: true\n    history: true\n    hash-type: number\n    theme: default\n    code-block-background: true\n    highlight-style: zenburn\n    code-link: false\n    code-copy: true\n    pagetitle: \"Dados e R\"\n    author-meta: \"Henrique Costa\"\n    date-meta: \"2024-08-19\"\n---\n\n\n::: {.my-title}\n# [Dados e R]{.blue} <br />Data Wrangling & DataViz\n\n::: {.my-grey}\n[Encontro 2 | 19/08/20024]{}<br />\n[Henrique Costa | Métodos Estratégicos em FinQuant]{}\n:::\n\n<!-- ![](../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400} -->\n:::\n\n<!-- Program II -->\n\n# Dados e R\n\n## Funções {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Receitas]{.b .green} permitem que os chefs preparem guloseimas saborosas\n    -   As receitas pedem ingredientes\n    -   Recipes involve one or more steps\n    -   As etapas transformam os ingredientes em guloseimas\n\n::: {.fragment .mt1}\n-   [Funções]{.b .blue} são como receitas *personalizáveis*\n    -   Funções solicitam entradas (\"argumentos\")\n    -   As funções envolvem uma ou mais linhas de código\n    -   O código transforma entradas em saídas\n    -   O uso de funções requer parênteses (geralmente)\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li vpqdjfdy trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n::: {.fragment}\n`doce <- f(ing1, ing2)`\n:::\n:::\n:::\n\n::: footer\n\n:::\n\n## Funções - Prática\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# CASO DE USO: A função pode executar uma tarefa de forma mais fácil e legível\n\n# MODELO: saída <- nome_da_função(entrada)\n\n9 ^ (1 / 2)\n\nx <- sqrt(9)\nx\n\n# ==============================================================================\n\n# LIÇÃO: Também podemos usar funções para transformar objetos\n\ny <- 9\n\nsqrt(y)\n\n# ==============================================================================\n\n# LIÇÃO: Podemos até usar funções para transformar o resultado dos cálculos\n\n2 / 3\n\nround(2 / 3)\n\n# ==============================================================================\n\n# LIÇÃO: Podemos personalizar o que uma função faz usando argumentos\n\n# MODELO: saída <- nome_da_função(argumento, nome_do_argumento = valor_do_argumento)\n\n\nround(2 / 3, digits = 2)\n\nround(2 / 3, digits = 3)\n\n# ==============================================================================\n\n# LIÇÃO: Alguns argumentos são opcionais porque têm valores padrão\n\nround(2 / 3) # the default value for digits is 0\n\nround(2 / 3, digits = 0)\n```\n:::\n\n\n::: footer\n\n:::\n\n\n## Vectores {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Vetores]{.b .blue} combinam objetos semelhantes em uma coleção\n    -   *Gosto de imaginar um trem puxando vários vagões*\n    -   Um vetor é um objeto com muitos subobjetos\n    -   Nós nos referimos a cada subobjeto como um [elemento]{.b .green}\n\n::: {.fragment .mt1}\n-   Algumas funções [transformam cada elemento]{.b .green} um de cada vez\n    -   *Dobrar a quantidade de carga em cada vagão*\n:::\n\n::: {.fragment .mt1}\n-   Algumas funções [resumir em todos os elementos]{.b .green}\n    -   *Calcule a carga total em todos os vagões do trem*\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n<br />\n    ![](../img/traincar.png)\n\n::: {.fragment}\n`v <- c(1, 2, 3, 4, 5)`\n:::\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Vetores - Prática\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# LIÇÃO: Podemos combinar vários elementos em um vetor\n\n# MODELO: nome_do_vetor <- c(elemento1, elemento2, elemento3)\n\nx <- 4 9 16 25 # error\n\nx <- c(4, 9, 16, 25)\nx\n\ny <- c(2, 3)\ny\n\n# ==============================================================================\n\n# LIÇÃO: Também podemos combinar vários vetores e elementos\n\nc(x, y)\n\nc(x, y, 20)\n\n# ==============================================================================\n\n# CASO DE USO: Operadores matemáticos transformarão cada elemento individualmente\n\nx + 1\n\nx * 3\n\nx # mas, novamente, isso não será salvo a menos que você use atribuição\n\n# ==============================================================================\n\n# CASO DE USO: Algumas funções também transformarão cada elemento individualmente\n\nsqrt(x)\n\nlog(x)\n\n# ==============================================================================\n\n# CASO DE USO: Outras funções resumirão o vetor com um único número\n\nlength(x)\n\nsum(x)\n\nmean(x)\n```\n:::\n\n\n::: footer\n\n:::\n\n<!-- Insert quiz and short break here? -->\n\n## Strings {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   Ao programar com R, precisamos de uma maneira de distinguir\n    -   Nomes de objetos/funções (por exemplo, a função *mean*)\n    -   Dados de texto/caractere (por exemplo, a palavra *mean*)\n    \n::: {.fragment .mt1}\n-   [Strings]{.b .blue} são a maneira do R armazenar dados de texto\n    -   Strings podem armazenar qualquer caractere (sem regras!)\n    -   As strings são criadas e exibidas com [quotes]{.b .green}\n:::\n\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li xqnbvely trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n\n:::\n:::\n\n::::\n\n<!-- Insert quiz and short break here? -->\n\n## Strings {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n\n::: {.fragment .mt1}\n-   R tem ótimas ferramentas para trabalhar com strings\n    -   As strings podem ser coletadas em vetores\n    -   Funções especiais podem transformar strings\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li xqnbvely trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n::: {.fragment}\n`name <- \"John Doe\"`\n:::\n\n:::\n:::\n\n:::\n\n## Strings - Prática\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# CASO DE USO: Strings são a principal maneira de armazenar dados de caracteres em R\n \nmy_color <- red # error\n\nmy_color <- \"red\" # correto\n\n# ==============================================================================\n\n# CASO DE USO: Strings também podem armazenar símbolos não permitidos em nomes de objetos\n\ndye <- \"red#40\"\ndye\n\ndyes <- c(\"red#40\", \"blue#02\")\ndyes\n\n# ==============================================================================\n\n# ARMADILHA: Muitas operações que você pode fazer com números não funcionarão para strings\n\ndyes + 1 # error\n\nmean(dyes) # error\n\n# ==============================================================================\n\n# CASO DE USO: Mas outras operações funcionam para ambos ou mesmo apenas para strings\n\nlength(dyes)\n\nnchar(dyes)\n\ndyes2 <- toupper(dyes)\ndyes2\n```\n:::\n\n\n::: footer\n\n:::\n\n## Packages (Pacotes) {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Livros de receitas]{.b .green} são uma ótima maneira de aprender a cozinhar\n    -   *Eles contêm muitas receitas e instruções*\n    -   Navegue em uma **livraria** online para encontrar um livro de receitas\n    -   **Encomende** para adicionar à sua **estante** pessoal\n    -   Para usar, **retire** o livro de receitas da prateleira\n\n\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li tboujdsn trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n\n:::\n:::\n\n\n## Packages (Pacotes) {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n\n::: {.fragment .mt1}\n-   [Pacotes]{.b .blue} são como livros de receitas para R\n    -   *Eles contêm funções e conjuntos de dados úteis*\n    -   Navegue em um **repositório** online para um pacote\n    -   **Instale** para adicioná-lo à sua **biblioteca** pessoal\n    -   Para usar, **carregue** o pacote da biblioteca\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li tboujdsn trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n::: {.fragment}\n`library(\"pkg_name\")`\n:::\n:::\n:::\n\n::: footer\n\n:::\n\n## Packages - Prática\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# CASO DE USO: O pacote stringr adiciona uma função para corrigir a capitalização\n\nstudents <- c(\"mary anne\", \"BENjamin\", \"Lee\")\n\n# ==============================================================================\n\n# ARMADILHA: Mas não podemos usar essa função sem instalar o pacote\n\nstr_to_title(students) # error\n\n# ==============================================================================\n\n# LIÇÃO: Instalando um pacote usando RStudio\n\n# - RStudio > Extras pane > Packages tab > Install button\n\n# ==============================================================================\n\n# ARMADILHA: Também precisamos carregar o pacote antes de podermos usá-lo\n\nstr_to_title(students) # error\n\n# ==============================================================================\n\n# LIÇÃO: Carregamos o pacote usando library()\n\nlibrary(\"stringr\")\nstr_to_title(students) # pronto isso funciona!\n\n# ==============================================================================\n\n# LIÇÃO: Também podemos manter nossos pacotes atualizados usando o RStudio\n\n# RStudio > Extras pane > Packages tab > Update button\n```\n:::\n\n\n::: footer\n\n:::\n\n<!-- Wrangle I -->\n\n# Wrangle I\n\n## Princípio de Dados Tidy (Arrumados) {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n- Existem muitas maneiras de armazenar dados\n\n::: {.fragment .mt1}\n- Aprenderemos o formato [tidy data]{.b .blue}\n    - Os dados devem ser *retangulares*\n    - Cada [variável]{.green} tem sua própria coluna\n    - Cada [observação]{.green} tem sua própria linha\n    - Cada [valor]{.verde} tem sua própria célula\n:::\n\n::: {.fragment .mt1}\n![](../img/tidydata.png)\n:::\n\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li qhdmndwt trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Outros conselhos sobre dados {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Nomeie todas as variáveis]{.b .blue} na primeira linha\n    -   Isso é chamado de [linha de cabeçalho]{.b .green}\n    \n::: {.fragment .mt1}\n-   [Evite células mescladas]{.b .blue} para armazenamento de dados\n    -   Estes são bons para comunicação\n:::\n\n::: {.fragment .mt1}\n-   [Evite células vazias]{.b .blue} sempre que possível\n    -   Marcar [dados ausentes]{.b .green} como `NA`\n:::\n\n::: {.fragment .mt1}\n-   [Evite formatação como dados]{.b .blue} para armazenamento\n    -   por exemplo, codificação de cores não redundante\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li dizvjgip trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Arrumando (*Tidying*) exemplo 1 {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"45%\"}\n#### Não Arrumado (Tidy)\n<table class=\"table-bad\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>Nome</td>\n    <td>Ann</td>\n    <td>Bob</td>\n    <td>Cat</td>\n    <td>Dom</td>\n  </tr>\n  <tr>\n    <td>Idade</td>\n    <td>13</td>\n    <td>10</td>\n    <td>11</td>\n    <td>11</td>\n  </tr>\n  <tr>\n    <td>Peso</td>\n    <td>56.4</td>\n    <td>46.8</td>\n    <td>41.3</td>\n    <td>43.3</td>\n  </tr>\n  </tbody>\n</table>\n\n::: {.fragment .mt1 .pv4}\n❌ Aqui, cada linha é uma variável e cada coluna é uma observação.\n:::\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\n::: {.fragment}\n#### Arrumado (*Tidy*)\n<table class=\"table-good\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>Nome</td>\n    <td>Idade</td>\n    <td>Peso</td>\n  </tr>\n  <tr>\n    <td>Ann</td>\n    <td>13</td>\n    <td>56.4</td>\n  </tr>\n  <tr>\n    <td>Bob</td>\n    <td>10</td>\n    <td>46.8</td>\n  </tr>\n  <tr>\n    <td>Cat</td>\n    <td>11</td>\n    <td>41.3</td>\n  </tr>\n  <tr>\n    <td>Dom</td>\n    <td>11</td>\n    <td>43.3</td>\n  </tr>\n  </tbody>\n</table>\n::: {.pv4}\n✔️ Aqui, cada coluna é uma variável e cada linha é uma observação.\n:::\n:::\n:::\n:::\n\n::: footer\n\n:::\n\n## Arrumando (*Tidying*) exemplo 2 {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"45%\"}\n#### Não arrumado (*Tidy*)\n<table class=\"table-bad\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>Nome:</td>\n    <td>Ann</td>\n    <td>Bob</td>\n    <td>Cat</td>\n    <td>Dom</td>\n  </tr>\n  <tr>\n    <td>Idade</td>\n    <td>Peso</td>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>13</td>\n    <td>56.4</td>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>10</td>\n    <td>46.8</td>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>11</td>\n    <td>41.3</td>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>11</td>\n    <td>43.3</td>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  </tbody>\n</table>\n\n::: {.fragment .mt1 .pv4}\n❌ Aqui, temos dados que não são retangulares porque a variável Names tem sua própria linha.\n:::\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\n::: {.fragment}\n#### Arrumado (*Tidy*)\n<table class=\"table-good\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>Nome</td>\n    <td>Idade</td>\n    <td>Peso</td>\n  </tr>\n  <tr>\n    <td>Ann</td>\n    <td>13</td>\n    <td>56.4</td>\n  </tr>\n  <tr>\n    <td>Bob</td>\n    <td>10</td>\n    <td>46.8</td>\n  </tr>\n  <tr>\n    <td>Cat</td>\n    <td>11</td>\n    <td>41.3</td>\n  </tr>\n  <tr>\n    <td>Dom</td>\n    <td>11</td>\n    <td>43.3</td>\n  </tr>\n  </tbody>\n</table>\n\n::: {.pv4}\n✔️ Aqui, tornamos os dados retangulares movendo a variável Nomes para sua própria coluna.\n:::\n:::\n:::\n:::\n\n::: footer\n\n:::\n\n## Arrumando (*Tidying*) exemplo 3 {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"45%\"}\n#### Não arrumado (*Tidy*)\n<table class=\"table-bad table-small\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>country</td>\n    <td>year</td>\n    <td>cases / population</td>\n  </tr>\n  <tr>\n    <td rowspan=2>Afghanistan</td>\n    <td>1999</td>\n    <td>NA / 19987071</td>\n  </tr>\n  <tr>\n    <td>2000</td>\n    <td>2666 / 20595360</td>\n  </tr>\n  <tr>\n    <td rowspan=2>Brazil</td>\n    <td>1999</td>\n    <td>37737 / 172006362</td>\n  </tr>\n  <tr>\n    <td>2000</td>\n    <td>80488 / 174504898</td>\n  </tr>\n  <tr>\n    <td rowspan=2>China</td>\n    <td>1999</td>\n    <td>212258 / 1272915272</td>\n  </tr>\n  <tr>\n    <td>2000</td>\n    <td>213766 / 1280428583</td>\n  </tr>\n  </tbody>\n</table>\n\n::: {.fragment .mt1 .pv4}\n❌ Aqui, mesclamos células e dois valores armazenados em uma única célula.\n:::\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\n::: {.fragment}\n#### Arrumado (*Tidy*)\n<table class=\"table-good table-small\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>country</td>\n    <td>year</td>\n    <td>cases</td>\n    <td>population</td>\n  </tr>\n  <tr>\n    <td>Afghanistan</td>\n    <td>1999</td>\n    <td>NA</td>\n    <td>19987071</td>\n  </tr>\n  <tr>\n    <td>Afghanistan</td>\n    <td>2000</td>\n    <td>2666</td>\n    <td>20595360</td>\n  </tr>\n  <tr>\n    <td>Brazil</td>\n    <td>1999</td>\n    <td>37737</td>\n    <td>172006362</td>\n  </tr>\n  <tr>\n    <td>Brazil</td>\n    <td>2000</td>\n    <td>80488</td>\n    <td>174504898</td>\n  </tr>\n  <tr>\n    <td>China</td>\n    <td>1999</td>\n    <td>212258</td>\n    <td>1272915272</td>\n  </tr>\n  <tr>\n    <td>China</td>\n    <td>2000</td>\n    <td>213766</td>\n    <td>1280428583</td>\n  </tr>\n  </tbody>\n</table>\n::: {.pv4}\n✔️Aqui, desfazemos a mesclagem dos países e separamos as variáveis de casos e populações em colunas.\n:::\n:::\n:::\n:::\n\n::: footer\n\n:::\n\n\n## Arrumando (*Tidying*) exemplo 4 {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"45%\"}\n#### Não arrumado\n<table class=\"table-bad\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>student</td>\n    <td>grade</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>[Amber]{.bg-yellow}</td>\n    <td>91.5</td>\n    <td>A-</td>\n  </tr>\n  <tr>\n    <td>[Bristol]{.bg-teal}</td>\n    <td>86.2</td>\n    <td>B</td>\n  </tr>\n  <tr>\n    <td>[Charlene]{.bg-yellow}</td>\n    <td>94.0</td>\n    <td>A</td>\n  </tr>\n  <tr>\n    <td>Diego</td>\n    <td>89.3</td>\n    <td>B+</td>\n  </tr>\n  <tr>\n    <td colspan=3>Legend: [Psych. Major]{.bg-yellow}, [Psych. Minor]{.bg-teal}</td>\n  </tr>\n  </tbody>\n</table>\n\n::: {.fragment .mt1 .pv4}\n❌ Aqui, temos um nome de variável ausente e formatação como dados.\n:::\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\n::: {.fragment}\n#### Arrumado\n<table class=\"table-good\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>student</td>\n    <td>psych</td>\n    <td>grade</td>\n    <td>letter</td>\n  </tr>\n  <tr>\n    <td>Amber</td>\n    <td>major</td>\n    <td>91.5</td>\n    <td>A-</td>\n  </tr>\n  <tr>\n    <td>Bristol</td>\n    <td>minor</td>\n    <td>86.2</td>\n    <td>B</td>\n  </tr>\n  <tr>\n    <td>Charlene</td>\n    <td>major</td>\n    <td>94.0</td>\n    <td>A</td>\n  </tr>\n  <tr>\n    <td>Diego</td>\n    <td>NA</td>\n    <td>89.3</td>\n    <td>B+</td>\n  </tr>\n  </tbody>\n</table>\n::: {.pv4}\n✔️ Aqui, adicionamos uma coluna para a variável psych, removemos a legenda e nomeamos a variável letter.\n:::\n:::\n:::\n:::\n\n::: footer\n\n:::\n\n\n## Arrumando (*Tidying*) exemplo 5 {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"45%\"}\n#### Não arrumado\n<table class=\"table-bad\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>student</td>\n    <td>grade</td>\n    <td>letter</td>\n  </tr>\n  <tr>\n    <td>Amber</td>\n    <td>91.5</td>\n    <td>A-</td>\n  </tr>\n  <tr>\n    <td>Bristol*</td>\n    <td>94.2</td>\n    <td>A</td>\n  </tr>\n  <tr>\n    <td colspan=3>Class Summary</td>\n  </tr>\n  <tr>\n    <td>As</td>\n    <td>2</td>\n    <td>Yay!</td>\n  </tr>\n  <tr>\n    <td>Bs</td>\n    <td>0</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td colspan=3 class=\"tr\">*Grade was revised.</td>\n  </tr>\n  </tbody>\n</table>\n\n::: {.fragment .mt1 .pv4}\n❌ Aqui, temos dois tipos de dados em um arquivo e uma nota de rodapé como dados.\n:::\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\n::: {.fragment}\n#### Arrumado\n<table class=\"table-good\" width=\"100%\">\n  <tbody>\n    <tr>\n      <td>student</td>\n      <td>grade</td>\n      <td>letter</td>\n      <td>revised</td>\n    </tr>\n    <tr>\n      <td>Amber</td>\n      <td>91.5</td>\n      <td>A-</td>\n      <td>FALSE</td>\n    </tr>\n    <tr>\n      <td>Bristol</td>\n      <td>94.2</td>\n      <td>A</td>\n      <td>TRUE</td>\n    </tr>\n  </tbody>\n</table>\n\n<table class=\"table-good\" width=\"100%\" style=\"margin-top: 1em;\">\n  <tbody>\n    <tr>\n      <td>letter</td>\n      <td>count</td>\n      <td>notes</td>\n    </tr>\n    <tr>\n      <td>A</td>\n      <td>2</td>\n      <td>Yay!</td>\n    </tr>\n    <tr>\n      <td>B</td>\n      <td>0</td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>\n\n::: {.pv4}\n✔️ Aqui, dividimos os dados em duas tabelas separadas e adicionamos as variáveis revisadas e notas.\n:::\n:::\n:::\n:::\n\n::: footer\n\n:::\n\n\n\n## Tabelas (Tibbles) {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   R funciona particularmente bem com [dados organizados]{.b .green}\n\n::: {.fragment .mt1}\n-   Armazenamos dados organizados em [data frames]{.b .green} ou [tibbles]{.b .blue}\n    -   Tibbles são apenas tabelas mais sofisticadas<br />\n        (ou seja, eles têm alguns recursos extras)\n:::\n\n::: {.fragment .mt1}\n-   Para usar tibbles, precisamos do pacote [tidyverse]{.b .blue}\n:::\n\n::: {.fragment .mt1}\n-   Tibbles são construídos a partir de um ou mais vetores\n    -   Os vetores devem ter o [mesmo comprimento]{.b .green}\n    -   Eles podem conter [diferentes tipos]{.b .green} de dados\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li jiievwhv trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Vetores {.smaller}\n\n![](../img/vectors.png)\n\n::: {.tc .pv4}\nComeçamos com três objetos vetoriais separados que têm todos o mesmo comprimento.\n\nNós configuramos para que o $n$-ésimo vagão em cada trem corresponda à mesma observação.\n:::\n\n::: footer\n\n:::\n\n## Tibble {.smaller}\n\n![](../img/tibble.png)\n\n::: {.tc .pv4}\nEntão combinamos os vetores em um único objeto tibble (ou data frame).\n\nAgora, conforme o tibble se move, as variáveis sempre ficam juntas.\n:::\n\n::: footer\n\n:::\n\n## Tibbles - Prática\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# CONFIGURAÇÃO: Instale e carregue o pacote tidyverse\n\n# Extras pane > Packages tab > Install\n\nlibrary(tidyverse)\n\n# ==============================================================================\n\n# LIÇÃO: Crie um tibble a partir de vetores\n\nx <- c(10, 20, 30, 40)\nx\n\ny <- x * 2 - 4\ny\n\nmy_tibble <- tibble(x, y)\nmy_tibble\n\n# ==============================================================================\n\n# CASO DE USO: Você pode misturar diferentes tipos de vetores em um único tibble\n\nfirst_names <- c(\"Adam\", \"Billy\", \"Caitlyn\", \"Debra\")\n\nage_years <- c(12, 13, 10, NA)\n\nguests <- tibble(first_names, age_years)\nguests\n\n# ==============================================================================\n\n# DICA: Para economizar tempo, você também pode criar os vetores na chamada tibble\n\ngradebook <- tibble(\n  grade = c(95, 83, 90, 76),\n  letter = c(\"a\", \"b\", \"a-\", \"c\")\n)\ngradebook\n\n# ==============================================================================\n\n# ARMADILHA: Não tente combinar tibbles com comprimentos diferentes\n\ny <- c(1, 2, 3)\nx <- c(\"a\", \"b\")\n\ntibble(y, x) #error\n\n# ==============================================================================\n\n# LIÇÃO: No entanto, a exceção é que R irá \"reciclar\" um único valor\n\ntibble(y, x = \"a\")\n\n# ==============================================================================\n\n# LIÇÃO: Você pode \"extrair\" um vetor de um tibble usando $\n\nmytibble <- tibble(x = c(1, 2, 3, 4, 5), y = \"test\")\n\nmytibble$x\n\nmytibble$y\n\n# ==============================================================================\n\n# ARMADILHA: Não tente extrair um vetor que não existe\n\nmytibble$z #error\n```\n:::\n\n\n::: footer\n\n:::\n\n\n## Tabelas longas e largas (long x wide) {.smaller}\n\n![](../img/original-dfs-tidy.png){fig-align=\"center\"}\n\n\n::: footer\n\n:::\n\n\n\n## Tabelas longas e largas (long x wide) {.smaller}\n\n![](../img/tidyr-longer-wider.gif){fig-align=\"center\"}\n\n\n::: footer\n\n:::\n\n\n\n\n## Importação e Exportação {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   Os dados geralmente são armazenados em [arquivos de dados]{.b .green}\n    -   Importar arquivos para R é chamado [reading]{.b .blue}\n    -   Exportar arquivos de R é chamado [writing]{.b .blue}\n\n::: {.fragment .mt1}\n-   Um tipo de arquivo de dados conveniente é um CSV\n    -   Isto significa [valores separados por vírgula]{.b .green}\n    -   Um arquivo CSV é fácil de compartilhar com outras pessoas\n:::\n\n::: {.fragment .mt1}\n-   O pacote [tidyverse]{.b .green} pode ler/escrever CSVs\n    -   Outros pacotes podem ler/escrever outros tipos\n        (e.g., *readxl*, *haven*, *rio*, *googlesheets4*)\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li dhkykqke trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Read/Write - Prática\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# CONFIGURAÇÃO: Carregue o pacote tidyverse (se ainda não o fez)\n\nlibrary(tidyverse)\n\n# ==============================================================================\n\n# CASO DE USO: Crie um tibble e grave-o em um arquivo\n\ngradebook <- tibble(\n  id = c(123, 456, 789),\n  grade = c(\"A\", \"B\", \"A\")\n)\ngradebook\n\nwrite_csv(gradebook, file = \"gradebook.csv\")\n\n# NOTA: Você pode ver o novo arquivo no painel Extras > aba Arquivos.\n# Você pode abrir o arquivo em outro programa (por exemplo, Microsoft Excel).\n# Você também pode enviar este arquivo por e-mail para outra pessoa para compartilhá-lo.\n\n# ==============================================================================\n\n# ARMADILHA: Não troque a ordem do tibble e do file\n\nwrite_csv(\"gradebook.csv\", gradebook) # error\n\n# ==============================================================================\n\n# CASO DE USO: Ler em um arquivo contendo dados\n\nold_gradebook <- read_csv(\"gradebook.csv\")\nold_gradebook\n\n# NOTA: read_csv() examinará e adivinhará o tipo de dado de cada variável.\n# Você pode dizer a ele o tipo de dado de cada variável, mas isso é mais avançado.\n\n# ==============================================================================\n\n# ARMADILHA: Não use as funções read.csv() e write.csv()\n\nold_gradebook <- read.csv(\"gradebook.csv\") # not a tibble\nold_gradebook\n```\n:::\n\n\n::: footer\n\n:::\n\n<!-- # [Practice II](https://pittmethods.github.io/r4ss/Day_1/Day1B_Practice.html){preview-link=\"false\"} -->\n\n\n# Wrangle II\n\n## Vérbos basicos em *data wrangling* {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [tidyverse]{.b .blue} fornece ferramentas para controlar tibbles\n    -   Essas funções são nomeadas após *verbos*\n    -   Então, se você nomear seus objetos com base em *substantivos*...\n    -   ...seu código se torna mais fácil de ler\n\n::: {.fragment .mt1}\n| Substantivo(substantivo) ❌        |  Verbo(substantivo) ✔️  | \n|:----------------------|:----------------|\n| `blender(fruit)`      | `blend(fruit)`  |\n| `screwdriver(screw)`  | `drive(screw)`  |\n| `boxcutter(box)`      | `cut(box)`      |\n\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li sbiheqdr trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Verbos focados em colunas {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Selecionar]{.b .blue} retém apenas certas colunas/variáveis\n    -   [`select(TBL, VAR_KEEP, -VAR_DROP)`]{.f3}\n\n::: {.fragment .mt1}\n-   [Mutate]{.b .blue} adiciona ou transforma colunas/variáveis\n    -   [`mutate(TBL, NEW_VAR = OLD_VAR / 1000)`]{.f3}\n:::\n\n::: {.fragment .mt1}\n-   [Rename]{.b .green} altera os nomes das colunas/variáveis\n    -   [`rename(TBL, NEW_NAME = OLD_NAME)`]{.f3}\n:::\n\n::: {.fragment .mt1}\n-   [Relocate]{.b .green} altera a ordem das colunas/variáveis\n    -   [`relocate(TBL, VAR_MOVE, .after = OTHER_VAR)`]{.f3}\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li ifxlrnhk trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## *Select* - Prática\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# CONFIGURAÇÃO: Carregar pacote e inspecionar exemplo tibble\n\nlibrary(tidyverse) # inclui o pacote dplyr\nstarwars\n\n# ==============================================================================\n\n# CASO DE USO: Reter apenas as variáveis especificadas\n\nsw <- select(starwars, name)\nsw\nsw <- select(starwars, name, sex, species)\nsw\n\n# ==============================================================================\n\n# ARMADILHA: Não esqueça de salvar a alteração com a atribuição\n\nselect(starwars, name, sex, species)\nstarwars # ainda inclui todas as variáveis\n\n# ==============================================================================\n\n# CASO DE USO: Reter todas as variáveis entre duas variáveis\n\nsw <- select(starwars, name, hair_color:eye_color)\nsw\n\n# ==============================================================================\n\n# CASO DE USO: Reter todas as variáveis, exceto as especificadas\n\nsw <- select(starwars, -sex, -species)\nsw\nsw <- select(starwars, -c(sex, species))\nsw\nsw <- select(starwars, -c(hair_color:starships))\nsw\n```\n:::\n\n\n::: footer\n\n:::\n\n## *Mutate* - Prática\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# CONFIGURAÇÃO: Criar exemplo tibble\n\npatients <- tibble(\n  id = c(\"S1\", \"S2\", \"S3\"),\n  feet = c(6, 5, 5),\n  inches = c(1, 7, 2),\n  pounds = c(176.3, 124.9, 162.6)\n)\npatients\n\n# ==============================================================================\n\n# CASO DE USO: Adicionar uma ou mais variáveis\n\np2 <- mutate(patients, sex = c(\"M\", \"F\", \"F\"))\np2\n\nages <- c(32, 41, 29)\np2 <- mutate(patients, ages = ages)\np2\n\np2 <- mutate(\n  patients, \n  sex = c(\"M\", \"F\", \"F\"), \n  ages = ages\n)\np2\n\n# ==============================================================================\n\n# CASO DE USO: Calcular variáveis\n\np2 <- mutate(patients, height = feet + inches / 12)\np2\n\np2 <- mutate(patients, ln_pounds = log(pounds))\np2\n\n# ==============================================================================\n\n# CASO DE USO: Substituir variáveis\n\npatients <- mutate(patients, height = height / 3.281)\npatients\n\n# ==============================================================================\n\n# CASO DE USO: Variáveis duplicadas\n\np2 <- mutate(patients, weight = pounds)\np2 # tanto peso quanto libras existem\n```\n:::\n\n\n::: footer\n\n:::\n\n## *Rename* / *Relocate* - Prática\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# CASO DE USO: Alterar o nome de uma ou mais variáveis\n\nstarwars\n\nsw <- rename(starwars, Character = name)\nsw\n\nsw <- rename(starwars, height_cm = height, mass_kg = mass)\nsw\n\n# ==============================================================================\n\n# ARMADILHA: Não troque a ordem e tente old_name = new_name\n\nsw <- rename(starwars, name = Character) # error\n\n# ==============================================================================\n\n# CASO DE USO: Mover variáveis antes ou depois de outra variável\n\nstarwars\n\nsw <- relocate(starwars, species, sex, .before = height)\nsw\n\nsw <- relocate(starwars, species, sex, .after = name)\nsw\n\n# ==============================================================================\n\n# ARMADILHA: Não se esqueça do ponto final!\n\nsw <- relocate(starwars, sex, before = height) \nsw # altura foi renomeada acidentalmente para antes\n```\n:::\n\n\n::: footer\n\n:::\n\n## Verbos focados em linha {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Arrange]{.b .blue} classifica as linhas com base em seus valores\n    -   [`arrange(TBL, VAR_SORT_UP)`]{.f3}\n    -   [`arrange(TBL, desc(VAR_SORT_DOWN))`]{.f3}\n    -   [`arrange(TBL, VAR_SORT_1ST, VAR_SORT_2ND)`]{.f3}\n\n::: {.fragment .mt1}\n-   [Filter]{.b .blue} retém certas linhas com base em critérios\n    -   [`filter(TBL, DBL_CRIT > 0)`]{.f3}\n    -   [`filter(TBL, STR_CRIT == \"A\")`]{.f3}\n    -   [`filter(TBL, CRIT1, CRIT2)`]{.f3}\n:::\n\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li dlprbpnx trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n\n## *Arrange* - Prática\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# CASO DE USO: Classificar observações por uma variável\n\nstarwars\n\nsw <- arrange(starwars, height)\nsw # classificado por altura, crescente\n\nsw <- arrange(starwars, name)\nsw # classificado por nome, em ordem alfabética\n\n# ==============================================================================\n\n# CASO DE USO: Classificar observações por uma variável, em ordem reversa\n\nsw <- arrange(starwars, desc(height))\nsw # classificado por altura, decrescente\n\nsw <- arrange(starwars, desc(name))\nsw # classificado por nome, em ordem alfabética reversa\n\n# ==============================================================================\n\n# CASO DE USO: Classificar observações por múltiplas variáveis\n\nsw <- arrange(starwars, hair_color, mass)\nsw # classificado por cor do cabelo, então os empates são quebrados por massa\n```\n:::\n\n\n::: footer\n\n:::\n\n## *Filter* - Prática\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# CASO DE USO: Reter apenas observações que atendem a um critério\n\nsw <- filter(starwars, mass > 100)\nsw # apenas observações com massa maior que 100\n\nsw <- filter(starwars, mass <= 100)\nsw # apenas observações com massa menor ou igual a 100\n\nsw <- filter(starwars, species == \"Human\")\nsw # apenas observações com espécies iguais ao Humano\n\nsw <- filter(starwars, species != \"Human\")\nsw # apenas observações com espécies diferentes do Humano\n\n# ==============================================================================\n\n# ARMADILHA: Não tente usar um único = para testar igualdade\n\nsw <- filter(starwars, height = 150) # error\n\nsw <- filter(starwars, height == 150) # correct\nsw \n\n# ==============================================================================\n\n# ARMADILHA: Não se esqueça de que R diferencia maiúsculas de minúsculas\n\nsw <- filter(starwars, species == \"human\")\nsw # nenhuma observação restante (porque deveria ser Humano)\n\n# ==============================================================================\n\n# CASO DE USO: Reter apenas observações que atendem a critérios complexos\n\nsw <- filter(starwars, mass > 100 & height > 200)\nsw # apenas observações com massa acima de 100 E altura acima de 200\n\nsw <- filter(starwars, height < 100 | hair_color == \"none\")\nsw # somente observações com altura menor que 100 OU hair_color igual a nenhum\n\n# ==============================================================================\n\n# ARMADILHA: Não se esqueça de preencher as duas condições\n\nsw <- filter(starwars, mass > 100 & < 200) # error\n\nsw <- filter(starwars, mass > 100 & mass < 200) # correto\nsw\n\n# ==============================================================================\n\n# ARMADILHA: Não tente igualar uma string a um vetor\n\nsw <- filter(starwars, species == c(\"Human\", \"Droid\")) # error\n\nsw <- filter(starwars, species %in% c(\"Human\", \"Droid\")) # correct\nsw\n```\n:::\n\n\n::: footer\n\n:::\n\n## *Filter* Cheatsheet {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\" .mytable}\n\n| Symbol | Description            | Num | Chr   |\n|--------|------------------------|-----|-------|\n| `<`    | Menor que              | Yes | *No*  |\n| `<=`   | Menor ou igual á       | Yes | *No*  |\n| `>`    | Maior que              | Yes | *No*  |\n| `>=`   | Maior ou igual á       | Yes | *No*  |\n| `==`   | Igual á                | Yes | Yes   |\n| `!=`   | diferente de           | Yes | Yes   |\n| `%in%` | Encontre em            | Yes | Yes   |\n| `&`    | Lógico - \"E\"           | Yes | Yes   |\n| `|`    | Lógico - \"Ou\"          | Yes | Yes   |\n\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li esixrdij trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n<!-- Program III -->\n\n# `Wrangle III`\n\n## `Pipes & Pipelines` {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n- How can we do [multiple operations]{.b .green} to an object?\n    1. `x <- 10`\n    2. `x2 <- sqrt(x)`\n    3. `x3 <- round(x2)`\n    \n::: {.fragment .mt1}\n- This works but is **cumbersome** and **error-prone**\n:::\n\n::: {.fragment .mt1}\n- A better approach is to use [pipes]{.b .blue} and [pipelines]{.b .green}\n    - `x3 <- 10 |> sqrt() |> round()`\n:::\n\n::: {.fragment .mt1}\n- I like to read `|>` as \"and then...\"\n    - \"Take 10 and then sqrt() and then round()\"\n:::\n    \n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li mhttdvjl trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Pipes Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: Enable the pipe operator shortcut\n\n# Tools > Global Options... > Code tab > Check \"Use Native Pipe Operator\"\n\n# Type out |> or press Ctrl+Shift+M (Windows) / Cmd+Shift+M (Mac)\n\n# ==============================================================================\n\n# LESSON: The pipe pushes objects to a function as its first argument\n\n# TEMPLATE: x |> function_name() is the same as function_name(x)\n\nx <- 10\n\ny <- sqrt(x)\ny\n\ny <- x |> sqrt()\ny\n\n# ==============================================================================\n\n# PITFALL: Don't forget to remove the object from the function call\n\nx |> sqrt(x) # wrong\n\nx |> sqrt() # correct\n\n# ==============================================================================\n\n# USECASE: You can still use arguments when piping\n\nz <- round(3.14, digits = 1)\nz\n\nz <- 3.14 |> round(digits = 1)\nz\n\n# ==============================================================================\n\n# USECASE: Pipes are useful with tibbles and wrangling verbs\n\nstarwars\n\nsw <- select(starwars, name, species, height)\nsw\n\nsw <- starwars |> select(name, species, height)\nsw\n\n# ==============================================================================\n\n# PITFALL: Don't add a pipe without a step after it\n\nsw <- starwars |> select(name, species, height) |> # error\n```\n:::\n\n\n::: footer\n\n:::\n\n## Pipelines Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# USECASE: You can chain multiple pipes together to make a pipeline\n\nx <- 10 |> sqrt() |> round()\nx\n\n# ==============================================================================\n\n# TIP: If you want to see the output of a pipeline, you can pipe to print()\n\nx <- 10 |> sqrt() |> round() |> print()\n\n# ==============================================================================\n\n# TIP: To make your pipelines more readable, move each step to a new line\n\nx <- \n  10 |> \n  sqrt() |> \n  round() |>\n  print()\n\n# ==============================================================================\n\n# PITFALL: Don't put the pipe at the beginning of a line, though\n\nx <- \n  10 \n  |> sqrt()\n  |> round()\n  |> print() # error\n\n# ==============================================================================\n\n# USECASE: Chain together a series of verbs to flexibly wrangle data\n\ntallones <- \n  starwars |> \n  select(name, species, height) |> \n  rename(height_cm = height) |> \n  mutate(height_ft = height_cm / 30.48) |>  \n  filter(height_ft > 7) |> \n  arrange(desc(height_ft)) |>  \n  print()\n```\n:::\n\n\n::: footer\n\n:::\n\n## Factors {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Factors]{.b .blue} are used to represent categorical data\n    -   Factors have multiple possible [levels]{.b .blue}\n    -   Levels are [discrete]{.b .green} and mutually-exclusive\n\n::: {.fragment .mt1}\n-   Sometimes categories are [unordered]{.b .green} (nominal)\n    -   Action or Comedy or Drama\n    -   Asia or Europe or North America\n:::\n\n::: {.fragment .mt1}\n-   Sometimes categories are [ordered]{.b .green} (ordinal)\n    -   Mild < Medium < Hot\n    -   XS < S < M < L < XL\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li cdbgwqyw trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Factors Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# USECASE: Ask 10 kids to order 1: nuggets, 2: pizza, or 3: salad\n\nfood <- c(2, 2, 1, 2, 1, 2, 1, 1, 2, 2)\nfood\n\n# ==============================================================================\n\n# LESSON: We can turn this vector into a factor with factor()\n\nfood2 <- factor(food, levels = c(1, 2, 3))\nfood2\n\nfood3 <- factor(food, levels = c(1, 2, 3),\n                labels = c(\"nuggets\", \"pizza\", \"salad\"))\nfood3\n\n# ==============================================================================\n\n# USECASE: We can also quickly and easily count each level with table()\n\ntable(food3)\n\n# ==============================================================================\n\n# PITFALL: Don't confuse levels and labels\n\nfood4 <- factor(food, labels = c(1, 2, 3),\n                levels = c(\"nuggets\", \"pizza\", \"salad\"))\nfood4 # full of <NA> because it can't find these levels\n\n# ==============================================================================\n\n# USECASE: You can also just enter strings directly (as self-labels)\n\ngenre <- c(\"pop\", \"metal\", \"pop\", \"rock\", \"rap\", \"rap\", \"pop\", \"rock\")\ngenre\n\ngenre2 <- factor(genre) # observed levels will be assigned alphabetically\ngenre2\n\ntable(genre2)\n\n# ==============================================================================\n\n# LESSON: If ordinal, enter levels low-to-high and add ordered = TRUE\n\nsalsa <- c(\"hot\", \"mild\", \"medium\", \"mild\", \"medium\", \"medium\")\n\nsalsa2 <- factor(salsa, \n                 levels = c(\"mild\", \"medium\", \"hot\"), \n                 ordered = TRUE)\nsalsa2 \n\n# NOTE: We may want to visualize or model ordinal factors differently\n\n# ==============================================================================\n\n# USECASE: Working with factors in a tibble\n\ncereal <- read_csv(\"cereal.csv\")\ncereal\n\ncereal2 <- mutate(cereal, mfr = factor(mfr), type = factor(type))\ncereal2\n\ntable(cereal2$mfr)\n\ntable(cereal2$type)\n```\n:::\n\n\n::: footer\n\n:::\n\n## Missing Values {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   Sometimes your data will have [missing values]{.b .blue}\n    -   Perhaps these were [never collected]{.b .green}\n    -   Perhaps the values were [lost/corrupted]{.b .green}\n    -   Perhaps the participant [didn't respond]{.b .green}\n\n::: {.fragment .mt1}\n-   We need to tell R which values are missing\n    -   To do so, we set those values to `NA`\n    -   Functions from **tidyverse** make this easy\n:::\n\n::: {.fragment .mt1}\n-   Missingness is often [\"contagious\"]{.b .green} in R<br />\n    e.g., a vector with `NA` has an unknown mean\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li rwotyanb trigger=loop delay=3000 speed=0.5 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Missing Values Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse for the read and mutate functions\n\nlibrary(tidyverse)\n\n# ==============================================================================\n\n# PITFALL: Number codes for missingness will mess up calculations in R\n\nheights <- c(149, 158, -999) # here we use -999 to represent a missing value\n\nrange(heights)\n\nmean(heights)\n\nlog(heights) # our missing value is no longer -999\n\n# ==============================================================================\n\n# USECASE: Use NA for missingness instead\n\nheights2 <- c(149, 158, NA)\nheights2\n\nlog(heights2) # the NA stayed an NA (due to contagiousness)\n\n# ==============================================================================\n\n# LESSON: Use na.rm = TRUE to do a summary function ignoring the NAs\n\nmean(heights2) # the mean is an NA (due to contagiousness)\n\nmean(heights2, na.rm = TRUE)\n\nrange(heights2, na.rm = TRUE)\n\n# ==============================================================================\n\n# USECASE: Dealing with missing values in tibbles\n\ncereal <- read_csv(\"cereal.csv\")\n\ncereal$rating\n\nrange(cereal$rating)\n\n# ==============================================================================\n\n# LESSON: Use na_if() to convert specific values to NA while mutating\n\ncereal2 <- mutate(cereal, rating = na_if(rating, -999))\n\ncereal2$rating\n\nrange(cereal2$rating, na.rm = TRUE)\n\n# ==============================================================================\n\n# LESSON: Use read_csv(na) to convert specific values to NA while reading\n\ncereal3 <- read_csv(\"cereal.csv\", na = \"-999\")\n\ncereal3$rating\n\nrange(cereal3$rating, na.rm = TRUE)\n```\n:::\n\n\n::: footer\n\n:::\n\n<!-- Practice III -->\n\n<!-- # [Practice III](https://pittmethods.github.io/r4ss/Day_2/Day2A_Practice.html){preview-link=\"false\"} -->\n\n\n\n# `Wrangle IV`\n\n## Summarize {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   Although we store data about many observations...\n-   ...we often want to [summarize across]{.b .blue} observations\n    -   This is like [folding]{.b .green} the tibble down to [one row]{.b .green}\n\n::: {.fragment .mt1}\n-   We've seen functions that summarize vectors\n    -   `length()`, `sum()`, `min()`, `max()`\n    -   `mean()`, `median()`, `sd()`, `var()`\n:::\n\n::: {.fragment .mt1}\n-   `summarize()` lets us use them on tibbles\n    -   It works very similarly to `mutate()`\n    -   It always creates a tibble as output\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li uhmqrsgl trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Summarize Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nsales <- \n  tibble(\n    customer = c(1, 2, 3, 1, 3),\n    store = c(\"A\", \"A\", \"A\", \"B\", \"B\"),\n    items = c(25, 20, 16, 10, 5),\n    spent = c(685, 590, 392, 185, 123)\n  ) |> \n  print()\n\n# ==============================================================================\n\n# USECASE: Summarize the typical sales\n\nmy_summary <- \n  sales |> \n  summarize(\n    avg_items = mean(items),\n    avg_spent = mean(spent)\n  ) |> \n  print()\n\n# ==============================================================================\n\n# PITFALL: Don't use summary() instead of summarize()\n\nmy_summary <- \n  sales |> \n  summary(\n    avg_items = mean(items),\n    avg_spent = mean(spent)\n  ) |> \n  print() # not a tibble\n\n# ==============================================================================\n\n# USECASE: Use more than one summary function\n\nmy_summary <- \n  sales |> \n  summarize(\n    total_items = sum(items),\n    total_spent = sum(spent),\n    avg_items = mean(items),\n    avg_spent = mean(spent)\n  ) |> \n  print()\n\n# ==============================================================================\n\n# USECASE: Use counting functions\n\nmy_counts <- \n  sales |> \n  summarize(\n    n_sales = n(),\n    n_customers = n_distinct(customer),\n    n_stores = n_distinct(store)\n  ) |> \n  print()\n```\n:::\n\n\n::: footer\n\n:::\n\n## Group Summarize {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n- We can also summarize a tibble [by group]{.b .blue}\n    -   This is like [folding]{.b .green} the tibble multiple times\n    -   Specifically, we fold down to [one row per group]{.b .green}\n\n::: {.fragment .mt1}\n-   The syntax for summarize is identical\n    -   The only difference is to the tibble\n    -   We first pass it through `group_by()`\n    -   Pipelines make this very easy\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li pmwtbpap trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Group Summarize Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nsales <- \n  tibble(\n    customer = c(1, 2, 3, 1, 3),\n    store = c(\"A\", \"A\", \"A\", \"B\", \"B\"),\n    items = c(25, 20, 16, 10, 5),\n    spent = c(685, 590, 392, 185, 123)\n  ) |> \n  print()\n\n# ==============================================================================\n\n# LESSON: We pass a tibble through group_by to group it\n\nsales\n\nsales |> group_by(store) # note the display says \"grouped\"\n\n# ==============================================================================\n\n# USECASE: We can then summarize and get stats per group\n\nsales |> \n  group_by(store) |> \n  summarize(\n    customers = n_distinct(customer),\n    items_sold = sum(items),\n    total_sales = sum(spent),\n    avg_items = mean(items),\n    avg_spent = mean(spent)\n  )\n\n# ==============================================================================\n\n# SETUP: Let's get a larger, more realistic dataset\n\n# Extra pane > Packages tab > Install > nycflights13\n\nlibrary(\"nycflights13\")\n\nflights\n\n# ==============================================================================\n\n# USECASE: Find the carrier with the lowest average delays\n\nflights |> \n  group_by(carrier) |> \n  summarize(m_delay = mean(dep_delay, na.rm = TRUE)) |> \n  arrange(m_delay)\n\n# ==============================================================================\n\n# LESSON: We can also group by multiple variables\n\n# USECASE: Let's find the day of the year with the most flights\n\nflights |> \n  group_by(month, day) |> \n  summarize(n_flights = n()) |> \n  arrange(desc(n_flights))\n```\n:::\n\n\n::: footer\n\n:::\n\n<!-- Visualize I -->\n\n# Visualize I\n\n## What is a graphic? {.smaller}\n\n::: {.pv4 .tc}\n![](../img/graphics.png)\n\n::: {.fragment}\nA [data visualization]{.b .blue} expresses [data]{.b .green} through [visual aesthetics]{.b .green}.\n:::\n:::\n\n::: footer\n\n:::\n\n## Describing Graphics {.smaller}\n\n::: {.pv4 .tc}\n\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![](slide_tidyverse_files/figure-revealjs/graphics1-1.png){width=960}\n:::\n\n::: {.cell-output-display}\n![](slide_tidyverse_files/figure-revealjs/graphics1-2.png){width=960}\n:::\n:::\n\n\n::: {.fragment}\nSome simple graphics are [easy to describe]{.b .green} and may even have [ready names]{.b .blue}.\n:::\n:::\n\n::: footer\n\n:::\n\n## Describing Graphics {.smaller}\n\n::: {.pv4 .tc}\n\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![](slide_tidyverse_files/figure-revealjs/graphics2-1.png){width=960}\n:::\n\n::: {.cell-output-display}\n![](slide_tidyverse_files/figure-revealjs/graphics2-2.png){width=960}\n:::\n:::\n\n\n::: {.fragment}\nA [grammar of graphics]{.b .blue} will help us describe more [complex]{.b .green} graphics.\n:::\n:::\n\n::: footer\n\n:::\n\n## The Grammar of Graphics {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   The [grammar of graphics]{.b .blue} is a set of rules for [describing]{.b .green} and [creating]{.b .green} data visualizations\n\n::: {.fragment .mt1}\n-   To make our data visual (and therefore put our highly evolved occipital lobes to work)...\n    -   We connect [variables]{.b .blue} to [visual qualities]{.b .green}\n    -   We represent [observations]{.b .blue} as [visual objects]{.b .green}\n:::\n\n::: {.fragment .mt1}\n-   This requires some *fundamental* elements\n    -   We will first learn about them in lecture\n    -   We will then apply them in R using \\{ggplot2\\}\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n<!-- {{< li ksoxpinm trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}} -->\n![](../img/gglayers.png)\n:::\n:::\n\n::: footer\n\n:::\n\n## Data {.smaller}\n\n::: {.pv4 .tc}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   <chr>        <chr>      <dbl> <int> <int> <chr> <chr> <int> <int> <chr> <chr>\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# ℹ 224 more rows\n```\n\n\n:::\n:::\n\n\n::: {.fragment .mt1}\nGraphics require [data]{.b .blue} (e.g., tibbles), which describe [observations]{.b .green} using [variables]{.b .green}.\n:::\n:::\n\n::: footer\n\n:::\n\n## Aesthetic Mappings {.smaller}\n\n::: {.pv4 .tc}\n\n![](../img/aes.png)\n\n::: {.fragment}\nGraphics require [aesthetic mappings]{.b .blue}, which connect [data variables]{.b .green} to [visual qualities]{.b .green}.\n:::\n:::\n\n::: footer\n\n:::\n\n## Scales {.smaller}\n\n::: {.pv4 .tc}\n\n::: {layout-ncol=2}\n![](../img/position.png)\n\n![](../img/otherscale.png)\n:::\n\n::: {.fragment .mt1}\nGraphics require [scales]{.b .blue}, which connect specific [data *values*]{.b .green} to specific [aesthetic *values*]{.b .green}.\n:::\n:::\n\n::: footer\n\n:::\n\n## Geometric Objects {.smaller}\n\n::: {.pv4 .tc}\n\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![](slide_tidyverse_files/figure-revealjs/geoms-1.png){width=960}\n:::\n\n::: {.cell-output-display}\n![](slide_tidyverse_files/figure-revealjs/geoms-2.png){width=960}\n:::\n:::\n\n\n::: {.fragment .mt1}\nGraphics require [geometric objects]{.b .blue} (geoms), which [represent the observations]{.b .green}.\n:::\n:::\n\n::: footer\n\n:::\n\n## ggplot2 Basics {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   The [ggplot2]{.b .blue} package is a part of tidyverse\n    -   No need to install or load it separately\n    -   It plays nicely with tibbles and wrangling\n\n::: {.fragment .mt1}\n-   It implements the [grammar of graphics]{.b .green} in R\n    -   The \"gg\" stands for \"grammar of graphics\"\n    -   Thus, we will need to provide all four elements\n:::\n\n::: {.fragment .mt1}\n-   We will create a [pseudo-pipeline]{.b .green} of commands\n    -   However, we will use `+` rather than `|>`\n    -   This is because \\{ggplot2\\} predates the R pipe\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li gkeohday trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## ggplot2 Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nmpg\n\n# ==============================================================================\n\n# LESSON: First, set the data to a tibble\np <- ggplot(data = mpg)\np\n\n# ==============================================================================\n\n# LESSON: Next, set the aesthetic mappings with aes()\n\np <- ggplot(data = mpg, mapping = aes(x = displ, y = hwy))\np\n\n# ==============================================================================\n\n# TIP: You can leave off the optional argument names\n\np <- ggplot(mpg, aes(x = displ, y = hwy))\np\n\n# ==============================================================================\n\n# LESSON: Next, set the positional scales\n\np <- ggplot(mpg, aes(x = displ, y = hwy)) +\n  scale_x_continuous(\n    name = \"Engine Size (in liters)\", \n    limits = c(1, 7), \n    breaks = 1:7\n  ) +\n  scale_y_continuous(\n    name = \"Highway Fuel Efficiency (in miles/gallon)\",\n    limits = c(10, 50),\n    breaks = c(10, 20, 30, 40, 50)\n  )\np\n\n# ==============================================================================\n\n# LESSON: Finally, add a point geom\n\np <- \n  ggplot(mpg, aes(x = displ, y = hwy)) + \n  scale_x_continuous(\n    name = \"Engine Size (in liters)\", \n    limits = c(1, 7), \n    breaks = 1:7\n  ) +\n  scale_y_continuous(\n    name = \"Highway Fuel Efficiency (in miles/gallon)\",\n    limits = c(10, 50),\n    breaks = c(10, 20, 30, 40, 50)\n  ) +\n  geom_point()\n\n# ==============================================================================\n\n# TIP: If you leave off the scales, R will try to guess\n\np <- ggplot(mpg, aes(x = displ, y = hwy)) + geom_point()\np\n\n# ==============================================================================\n\n# LESSON: We can also customize the geom with arguments\n\np <- ggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point(color = \"red\", shape = \"square\", size = 2)\np\n```\n:::\n\n\n::: footer\n\n:::\n\n## Basic Layering {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   ggplot2 uses a [layered]{.b .blue} grammar of graphics\n    -   We can keep [stacking geoms]{.b .green} on top\n\n::: {.fragment .mt1}\n-   Layering adds a lot of possibilities\n    -   We can convey [more complex]{.b .green} ideas\n    -   We can learn more about our data\n:::\n\n::: {.fragment .mt1}\n-   But we can still describe these graphics\n    -   Just [describe each layer]{.b .green} in turn\n    -   And describe the layers' ordering\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li ikwcijxm trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Basic Layering Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nmpg\n\n# ==============================================================================\n\n# USECASE: Add a smooth geom (i.e., line of best fit)\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_smooth()\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n# ==============================================================================\n\n# USECASE: Add a line geom (i.e., connecting points)\n\neconomics\n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_point()\n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_point() +\n  geom_line(color = \"orange\", size = 1)\n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_line(color = \"orange\", size = 1) +\n  geom_point()\n\n# ==============================================================================\n\n# USECASE: Add reference line geoms\n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_hline(yintercept = 0, color = \"orange\", size = 1) +\n  geom_line(color = \"blue\", size = 1) +\n  geom_point()\n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_vline(xintercept = 7.5, color = \"orange\", size = 1) +\n  geom_line(color = \"blue\", size = 1) +\n  geom_point() \n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_abline(intercept = 4000, slope = 0.5, color = \"orange\", size = 1) +\n  geom_line(color = \"blue\", size = 1) +\n  geom_point() \n```\n:::\n\n\n::: footer\n\n:::\n\n## Working with Color {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   Color scales come in two main types:\n    -   [Discrete]{.b .blue} scales have [separate colors]{.b .green}\n        -   Best with factor variables\n    -   [Continuous]{.b .blue} scales [form a gradient]{.b .green}\n        -   Best with numeric variables\n\n::: {.fragment .mt1}\n-   There are two ways to control color:\n    -   You can [map color]{.b .blue} to a [variable]{.b .green}\n        -   It will take on *different* values\n    -   You can [set color]{.b .blue} to a [value]{.b .green}\n        -   It will take on *one* value only\n:::\n\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li fiivuxdi trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Color Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nmpg\n\n# ==============================================================================\n\n# USECASE: Continuous color scales work well with numeric variables\n\nggplot(mpg, aes(x = hwy, y = cty, color = displ)) +\n  geom_point(size = 4)\n\nggplot(mpg, aes(x = hwy, y = cty, color = displ)) +\n  geom_point(size = 4) +\n  scale_color_continuous(type = \"viridis\")\n\n# ==============================================================================\n\n# USECASE: Use a discrete color scale with categorical variables\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point()\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  scale_color_discrete(\n    name = \"Drivetrain\", \n    breaks = c(\"4\", \"f\", \"r\"), \n    labels = c(\"Four Wheel\", \"Front Wheel\", \"Rear Wheel\")\n  )\n\n# ==============================================================================\n\n# PITFALL: Don't forget to set categorical variables as factors\n\nggplot(mpg, aes(x = displ, y = hwy, color = cyl)) + \n  geom_point() # R guesses you want a continuous scale\n\nggplot(mpg, aes(x = displ, y = hwy, color = factor(cyl))) + \n  geom_point() + \n  scale_color_discrete(name = \"Cylinders\")\n\n# ==============================================================================\n\n# LESSON: Set a geom's color aesthetic to make it always that color\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(color = \"red\")\n\n# ==============================================================================\n\n# PITFALL: However, do this inside of geom() not aes()\n\nggplot(mpg, aes(x = displ, y = hwy, color = \"blue\")) + \n  geom_point() #unintended\n\n# ==============================================================================\n\n# LESSON: If you both set and map color, the setting will win\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) + \n  geom_point(color = \"blue\") \n```\n:::\n\n\n::: footer\n\n:::\n\n## Themes {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Themes]{.b .blue} control how non-data elements look\n    -   e.g., how thick to draw the gridlines\n    -   e.g., where to position the legend\n\n::: {.fragment .mt1}\n-   [Complete themes]{.b .green} change many elements at once\n    -   Some are built into ggplot2\n    -   Others come in R packages\n    -   \\{papaja\\} provides `theme_apa()`\n:::\n\n::: {.fragment .mt1}\n-   [Individual elements]{.b .green} can be customized too\n    -   To do so, use `theme()` and [this reference](https://ggplot2.tidyverse.org/reference/element.html)\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li hbkyydsg trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Themes Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example graphic\n\nlibrary(tidyverse)\n\np <- \n  ggplot(mpg, aes(x = displ, y = hwy, color = drv)) + \n  geom_point() +\n  labs(title = \"Fuel Efficiency\")\np\n\n# ==============================================================================\n\n# USECASE: Apply a \"complete\" theme\n\np + theme_bw()\n\np + theme_classic()\n\np + theme_dark()\n\n# ==============================================================================\n\n# LESSON: More more precise control, we can use theme()\n\np + theme(legend.position = \"top\")\n\np + theme(plot.title = element_text(color = \"purple\", face = \"bold\"))\n\np + theme(panel.grid = element_blank())\n\n# NOTE: There are a lot of elements to learn, so use a cheatsheet!\n```\n:::\n\n\n::: footer\n\n:::\n\n## Exporting Graphics {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   We may need to [export graphics]{.b .blue} from R\n    -   e.g., for a paper, poster, or presentation\n\n::: {.fragment .mt1}\n-   This job is handling fantastically by `ggsave()`\n    -   We can create many types of files\n    -   We can customize the exact size\n:::\n\n::: {.fragment .mt1}\n-   I recommend `.png` for most daily purposes\n    -   For publishing, I prefer `.pdf` or `.svg`\n    -   They retain perfect quality at any zoom\n    -   You can send these files to most publishers\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li amfaktum trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Exporting Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example graphic\n\nlibrary(tidyverse)\n\np <- ggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point() + geom_smooth() +\n  labs(x = \"Engine Displacement\", y = \"Highway MPG\")\np\n\n# ==============================================================================\n\n# USECASE: Save a specific ggplot object to a file\n\nggsave(filename = \"pfinal.png\", plot = p)\n\n# ==============================================================================\n\n# LESSON: Specify the size of the file to create\n\nggsave(filename = \"pfinal2.png\", plot = p, \n       width = 6, height = 3, units = \"in\")\n\n# ==============================================================================\n\n# LESSON: Just change the extension to create a different file type\n\nggsave(filename = \"pfinal2.pdf\", plot = p, \n       width = 6, height = 3, units = \"in\")\n\n# ==============================================================================\n\n# PITFALL: Creating a very large file may lead to small text\n\nggsave(filename = \"p_poster.png\", plot = p, \n       width = 12, height = 8, units = \"in\")\n\n# ==============================================================================\n\n# TIP: You can quickly increase the text size using base_size\n\np2 <- p + theme_grey(base_size = 24)\n\nggsave(filename = \"p_poster2.png\", plot = p2,\n       width = 12, height = 8, units = \"in\")\n```\n:::\n\n\n::: footer\n\n:::\n\n<!-- Practice IV -->\n\n<!-- # [Practice IV](https://pittmethods.github.io/r4ss/Day_2/Day2B_Practice.html){preview-link=\"false\"} -->\n\n",
    "supporting": [
      "slide_tidyverse_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}