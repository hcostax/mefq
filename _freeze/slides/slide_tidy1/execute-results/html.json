{
  "hash": "530559786474b2cd6e095869c4700326",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: \n  revealjs:\n    css: ../styles.css\n    slide-number: true\n    show-slide-number: all\n    preview-links: auto\n    self-contained: true\n    progress: true\n    history: true\n    hash-type: number\n    theme: default\n    code-block-background: true\n    highlight-style: zenburn\n    code-link: false\n    code-copy: true\n    pagetitle: \"Dados e R\"\n    author-meta: \"Henrique Costa\"\n    date-meta: \"2024-08-19\"\n---\n\n\n::: {.my-title}\n# [Dados e R]{.blue} <br />Data Wrangling & DataViz\n\n::: {.my-grey}\n[Encontro 2 | 19/08/20024]{}<br />\n[Henrique Costa | Métodos Estratégicos em FinQuant]{}\n:::\n\n<!-- ![](../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400} -->\n:::\n\n<!-- Program II -->\n\n# Dados e R\n\n## Funções {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Recipes]{.b .green} allow chefs to cook up tasty treats\n    -   Recipes call for ingredients\n    -   Recipes involve one or more steps\n    -   Steps transform ingredients into treats\n\n::: {.fragment .mt1}\n-   [Functions]{.b .blue} are like *customizable* recipes\n    -   Functions call for inputs (\"arguments\")\n    -   Functions involve one or more lines of code\n    -   Code transforms inputs into outputs\n    -   Using functions requires parentheses (usually)\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li vpqdjfdy trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n::: {.fragment}\n`out <- f(in1, in2)`\n:::\n:::\n:::\n\n::: footer\n\n:::\n\n## Functions Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# USECASE: Function can perform a task more easily and readably\n\n# TEMPLATE: output <- function_name(input)\n\n9 ^ (1 / 2)\n\nx <- sqrt(9)\nx\n\n# ==============================================================================\n\n# LESSON: We can also use functions to transform objects\n\ny <- 9\n\nsqrt(y)\n\n# ==============================================================================\n\n# LESSON: We can even use functions to transform the result of calculations\n\n2 / 3\n\nround(2 / 3)\n\n# ==============================================================================\n\n# LESSON: We can customize what a function does using arguments\n\n# TEMPLATE: output <- function_name(argument, argument_name = argument_value)\n\nround(2 / 3, digits = 2)\n\nround(2 / 3, digits = 3)\n\n# ==============================================================================\n\n# LESSON: Some arguments are optional because they have default values\n\nround(2 / 3) # the default value for digits is 0\n\nround(2 / 3, digits = 0)\n```\n:::\n\n\n::: footer\n\n:::\n\n## Vectors {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Vectors]{.b .blue} combine similar objects into a collection\n    -   *I like to imagine a train pulling multiple cars*<br />\n    ![](../img/traincar.png)\n    -   A vector is one object with many sub-objects\n    -   We refer to each sub-object as an [element]{.b .green}\n\n::: {.fragment .mt1}\n-   Some functions [transform each element]{.b .green} in turn\n    -   *Double the amount of cargo in every train car*\n:::\n\n::: {.fragment .mt1}\n-   Some functions [summarize across elements]{.b .green}\n    -   *Calculate the total cargo across all train cars*\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li bqmoqptv trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n::: {.fragment}\n`v <- c(1, 2, 3)`\n:::\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Vectors Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# LESSON: We can combine multiple elements into a vector\n\n# TEMPLATE: vector_name <- c(element1, element2, element3)\n\nx <- 4 9 16 25 # error\n\nx <- c(4, 9, 16, 25)\nx\n\ny <- c(2, 3)\ny\n\n# ==============================================================================\n\n# LESSON: We can also combine multiple vectors and elements\n\nc(x, y)\n\nc(x, y, 20)\n\n# ==============================================================================\n\n# USECASE: Math operators will transform each element individually\n\nx + 1\n\nx * 3\n\nx # but again, this won't be saved unless you use assignment\n\n# ==============================================================================\n\n# USECASE: Some functions will also transform each element individually\n\nsqrt(x)\n\nlog(x)\n\n# ==============================================================================\n\n# USECASE: Other functions will summarize the vector with a single number\n\nlength(x)\n\nsum(x)\n\nmean(x)\n```\n:::\n\n\n::: footer\n\n:::\n\n<!-- Insert quiz and short break here? -->\n\n## Strings {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   When talking to R, we need a way to distinguish\n    -   Object/function names (e.g., the *mean* function)\n    -   Text/character data (e.g., the word *mean*)\n    \n::: {.fragment .mt1}\n-   [Strings]{.b .blue} are R's way of storing text data\n    -   Strings can store any characters (no rules!)\n    -   Strings are created and displayed with [quotes]{.b .green}\n:::\n::: {.fragment .mt1}\n-   R has great tools for working with strings\n    -   Strings can be collected into vectors\n    -   Special functions can transform strings\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li xqnbvely trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n::: {.fragment}\n`name <- \"John Doe\"`\n:::\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Strings Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# USECASE: Strings are the main way to store character data in R\n \nmy_color <- red # error\n\nmy_color <- \"red\" # correct\n\n# ==============================================================================\n\n# USECASE: Strings can also store symbols not allowed in object names\n\ndye <- \"red#40\"\ndye\n\ndyes <- c(\"red#40\", \"blue#02\")\ndyes\n\n# ==============================================================================\n\n# PITFALL: Many operations you can do to numbers won't work for strings\n\ndyes + 1 # error\n\nmean(dyes) # error\n\n# ==============================================================================\n\n# USECASE: But other operations work for both or even just for strings\n\nlength(dyes)\n\nnchar(dyes)\n\ndyes2 <- toupper(dyes)\ndyes2\n```\n:::\n\n\n::: footer\n\n:::\n\n## Packages {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Cookbooks]{.b .green} are a great way to learn to cook\n    -   *They contain lots of recipes and instructions*\n    -   Browse an online **bookstore** for a cookbook\n    -   **Order** it to add it to your personal **bookshelf**\n    -   To use, **pull** the cookbook off the shelf\n\n::: {.fragment .mt1}\n-   [Packages]{.b .blue} are like cookbooks for R\n    -   *They contain helpful functions and datasets*\n    -   Browse an online **repository** for a package\n    -   **Install** it to add it to your personal **library**\n    -   To use, **load** the package from the library\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li tboujdsn trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n::: {.fragment}\n`library(\"pkg_name\")`\n:::\n:::\n:::\n\n::: footer\n\n:::\n\n## Packages Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# USECASE: The stringr package adds a function to fix capitalization\n\nstudents <- c(\"mary anne\", \"BENjamin\", \"Lee\")\n\n# ==============================================================================\n\n# PITFALL: But we can't use that function without installing the package\n\nstr_to_title(students) # error\n\n# ==============================================================================\n\n# LESSON: Installing a package using RStudio\n\n# - RStudio > Extras pane > Packages tab > Install button\n\n# ==============================================================================\n\n# PITFALL: We also need to load the package before we can use it\n\nstr_to_title(students) # error\n\n# ==============================================================================\n\n# LESSON: We load the package using library()\n\nlibrary(\"stringr\")\nstr_to_title(students) #finally works!\n\n# ==============================================================================\n\n# LESSON: We can also keep our packages updated using RStudio\n\n# RStudio > Extras pane > Packages tab > Update button\n```\n:::\n\n\n::: footer\n\n:::\n\n<!-- Wrangle I -->\n\n# `Wrangle I`\n\n## Tidy Data Principles {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n- There are many ways to store data\n\n::: {.fragment .mt1}\n- We will be learning the [tidy data]{.b .blue} format\n    - Data should be *rectangular*\n    - Each [variable]{.green} has its own column\n    - Each [observation]{.green} has its own row\n    - Each [value]{.green} has its own cell\n:::\n\n::: {.fragment .mt1}\n![](../img/tidydata.png)\n:::\n\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li qhdmndwt trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Other Data Advice {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Name all variables]{.b .blue} in the first row\n    -   This is called a [header row]{.b .green}\n    \n::: {.fragment .mt1}\n-   [Avoid merged cells]{.b .blue} for data storage\n    -   These are okay for communication\n:::\n\n::: {.fragment .mt1}\n-   [Avoid empty cells]{.b .blue} whenever possible\n    -   Mark [missing data]{.b .green} as `NA`\n:::\n\n::: {.fragment .mt1}\n-   [Avoid formatting-as-data]{.b .blue} for storage\n    -   e.g., non-redundant color-coding\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li dizvjgip trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Tidying Example 1 {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"45%\"}\n#### Not Tidy\n<table class=\"table-bad\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>Name</td>\n    <td>Ann</td>\n    <td>Bob</td>\n    <td>Cat</td>\n    <td>Dom</td>\n  </tr>\n  <tr>\n    <td>Age</td>\n    <td>13</td>\n    <td>10</td>\n    <td>11</td>\n    <td>11</td>\n  </tr>\n  <tr>\n    <td>Weight</td>\n    <td>56.4</td>\n    <td>46.8</td>\n    <td>41.3</td>\n    <td>43.3</td>\n  </tr>\n  </tbody>\n</table>\n\n::: {.fragment .mt1 .pv4}\n❌ Here, each row is a variable and each column is an observation.\n:::\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\n::: {.fragment}\n#### Tidy\n<table class=\"table-good\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>Name</td>\n    <td>Age</td>\n    <td>Weight</td>\n  </tr>\n  <tr>\n    <td>Ann</td>\n    <td>13</td>\n    <td>56.4</td>\n  </tr>\n  <tr>\n    <td>Bob</td>\n    <td>10</td>\n    <td>46.8</td>\n  </tr>\n  <tr>\n    <td>Cat</td>\n    <td>11</td>\n    <td>41.3</td>\n  </tr>\n  <tr>\n    <td>Dom</td>\n    <td>11</td>\n    <td>43.3</td>\n  </tr>\n  </tbody>\n</table>\n::: {.pv4}\n✔️ Here, each column is a variable and each row is an observation.\n:::\n:::\n:::\n:::\n\n::: footer\n\n:::\n\n## Tidying Example 2 {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"45%\"}\n#### Not Tidy\n<table class=\"table-bad\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>Names:</td>\n    <td>Ann</td>\n    <td>Bob</td>\n    <td>Cat</td>\n    <td>Dom</td>\n  </tr>\n  <tr>\n    <td>Age</td>\n    <td>Weight</td>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>13</td>\n    <td>56.4</td>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>10</td>\n    <td>46.8</td>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>11</td>\n    <td>41.3</td>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>11</td>\n    <td>43.3</td>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  </tbody>\n</table>\n\n::: {.fragment .mt1 .pv4}\n❌ Here, we have data that is not rectangular because the Names variable has its own row.\n:::\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\n::: {.fragment}\n#### Tidy\n<table class=\"table-good\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>Name</td>\n    <td>Age</td>\n    <td>Weight</td>\n  </tr>\n  <tr>\n    <td>Ann</td>\n    <td>13</td>\n    <td>56.4</td>\n  </tr>\n  <tr>\n    <td>Bob</td>\n    <td>10</td>\n    <td>46.8</td>\n  </tr>\n  <tr>\n    <td>Cat</td>\n    <td>11</td>\n    <td>41.3</td>\n  </tr>\n  <tr>\n    <td>Dom</td>\n    <td>11</td>\n    <td>43.3</td>\n  </tr>\n  </tbody>\n</table>\n\n::: {.pv4}\n✔️ Here, we have made the data rectangular by moving the Names variable to its own column.\n:::\n:::\n:::\n:::\n\n::: footer\n\n:::\n\n## Tidying Example 3 {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"45%\"}\n#### Not Tidy\n<table class=\"table-bad table-small\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>country</td>\n    <td>year</td>\n    <td>cases / population</td>\n  </tr>\n  <tr>\n    <td rowspan=2>Afghanistan</td>\n    <td>1999</td>\n    <td>NA / 19987071</td>\n  </tr>\n  <tr>\n    <td>2000</td>\n    <td>2666 / 20595360</td>\n  </tr>\n  <tr>\n    <td rowspan=2>Brazil</td>\n    <td>1999</td>\n    <td>37737 / 172006362</td>\n  </tr>\n  <tr>\n    <td>2000</td>\n    <td>80488 / 174504898</td>\n  </tr>\n  <tr>\n    <td rowspan=2>China</td>\n    <td>1999</td>\n    <td>212258 / 1272915272</td>\n  </tr>\n  <tr>\n    <td>2000</td>\n    <td>213766 / 1280428583</td>\n  </tr>\n  </tbody>\n</table>\n\n::: {.fragment .mt1 .pv4}\n❌ Here, we have merged cells and two values stored in a single cell.\n:::\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\n::: {.fragment}\n#### Tidy\n<table class=\"table-good table-small\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>country</td>\n    <td>year</td>\n    <td>cases</td>\n    <td>population</td>\n  </tr>\n  <tr>\n    <td>Afghanistan</td>\n    <td>1999</td>\n    <td>NA</td>\n    <td>19987071</td>\n  </tr>\n  <tr>\n    <td>Afghanistan</td>\n    <td>2000</td>\n    <td>2666</td>\n    <td>20595360</td>\n  </tr>\n  <tr>\n    <td>Brazil</td>\n    <td>1999</td>\n    <td>37737</td>\n    <td>172006362</td>\n  </tr>\n  <tr>\n    <td>Brazil</td>\n    <td>2000</td>\n    <td>80488</td>\n    <td>174504898</td>\n  </tr>\n  <tr>\n    <td>China</td>\n    <td>1999</td>\n    <td>212258</td>\n    <td>1272915272</td>\n  </tr>\n  <tr>\n    <td>China</td>\n    <td>2000</td>\n    <td>213766</td>\n    <td>1280428583</td>\n  </tr>\n  </tbody>\n</table>\n::: {.pv4}\n✔️ Here, we have un-merged the countries and separated the cases and populations variables into columns.\n:::\n:::\n:::\n:::\n\n::: footer\n\n:::\n\n\n## Tidying Example 4 {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"45%\"}\n#### Not Tidy\n<table class=\"table-bad\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>student</td>\n    <td>grade</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>[Amber]{.bg-yellow}</td>\n    <td>91.5</td>\n    <td>A-</td>\n  </tr>\n  <tr>\n    <td>[Bristol]{.bg-teal}</td>\n    <td>86.2</td>\n    <td>B</td>\n  </tr>\n  <tr>\n    <td>[Charlene]{.bg-yellow}</td>\n    <td>94.0</td>\n    <td>A</td>\n  </tr>\n  <tr>\n    <td>Diego</td>\n    <td>89.3</td>\n    <td>B+</td>\n  </tr>\n  <tr>\n    <td colspan=3>Legend: [Psych. Major]{.bg-yellow}, [Psych. Minor]{.bg-teal}</td>\n  </tr>\n  </tbody>\n</table>\n\n::: {.fragment .mt1 .pv4}\n❌ Here, we have a missing variable name and formatting-as-data.\n:::\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\n::: {.fragment}\n#### Tidy\n<table class=\"table-good\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>student</td>\n    <td>psych</td>\n    <td>grade</td>\n    <td>letter</td>\n  </tr>\n  <tr>\n    <td>Amber</td>\n    <td>major</td>\n    <td>91.5</td>\n    <td>A-</td>\n  </tr>\n  <tr>\n    <td>Bristol</td>\n    <td>minor</td>\n    <td>86.2</td>\n    <td>B</td>\n  </tr>\n  <tr>\n    <td>Charlene</td>\n    <td>major</td>\n    <td>94.0</td>\n    <td>A</td>\n  </tr>\n  <tr>\n    <td>Diego</td>\n    <td>NA</td>\n    <td>89.3</td>\n    <td>B+</td>\n  </tr>\n  </tbody>\n</table>\n::: {.pv4}\n✔️ Here, we have added a column for the psych variable, removed the legend, and named the letter variable.\n:::\n:::\n:::\n:::\n\n::: footer\n\n:::\n\n\n## Tidying Example 5 {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"45%\"}\n#### Not Tidy\n<table class=\"table-bad\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>student</td>\n    <td>grade</td>\n    <td>letter</td>\n  </tr>\n  <tr>\n    <td>Amber</td>\n    <td>91.5</td>\n    <td>A-</td>\n  </tr>\n  <tr>\n    <td>Bristol*</td>\n    <td>94.2</td>\n    <td>A</td>\n  </tr>\n  <tr>\n    <td colspan=3>Class Summary</td>\n  </tr>\n  <tr>\n    <td>As</td>\n    <td>2</td>\n    <td>Yay!</td>\n  </tr>\n  <tr>\n    <td>Bs</td>\n    <td>0</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td colspan=3 class=\"tr\">*Grade was revised.</td>\n  </tr>\n  </tbody>\n</table>\n\n::: {.fragment .mt1 .pv4}\n❌ Here, we have two types of data in one file and a footnote as data.\n:::\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\n::: {.fragment}\n#### Tidy\n<table class=\"table-good\" width=\"100%\">\n  <tbody>\n    <tr>\n      <td>student</td>\n      <td>grade</td>\n      <td>letter</td>\n      <td>revised</td>\n    </tr>\n    <tr>\n      <td>Amber</td>\n      <td>91.5</td>\n      <td>A-</td>\n      <td>FALSE</td>\n    </tr>\n    <tr>\n      <td>Bristol</td>\n      <td>94.2</td>\n      <td>A</td>\n      <td>TRUE</td>\n    </tr>\n  </tbody>\n</table>\n\n<table class=\"table-good\" width=\"100%\" style=\"margin-top: 1em;\">\n  <tbody>\n    <tr>\n      <td>letter</td>\n      <td>count</td>\n      <td>notes</td>\n    </tr>\n    <tr>\n      <td>A</td>\n      <td>2</td>\n      <td>Yay!</td>\n    </tr>\n    <tr>\n      <td>B</td>\n      <td>0</td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>\n\n::: {.pv4}\n✔️ Here, we have split the data into two separate tables and added the revised and notes variables.\n:::\n:::\n:::\n:::\n\n::: footer\n\n:::\n\n## Long vs. Wide Format {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"45%\"}\n#### Wide Format\n<table class=\"table-good\" width=\"100%\">\n  <tbody>\n    <tr>\n      <td>date</td>\n      <td>Boeing</td>\n      <td>Amazon</td>\n      <td>Google</td>\n    </tr>\n    <tr>\n      <td>2009-01-01</td>\n      <td>$173.55</td>\n      <td>$174.90</td>\n      <td>$174.34</td>\n    </tr>\n    <tr>\n      <td>2009-01-02</td>\n      <td>$172.61</td>\n      <td>$171.42</td>\n      <td>$170.04</td>\n    </tr>\n  </tbody>\n</table>\n\n::: {.fragment .mt1 .pv4}\n✔️ Here, we have a wide format where each observation is a date.\n:::\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\n::: {.fragment}\n#### Long Format\n<table class=\"table-good\" width=\"100%\">\n  <tbody>\n    <tr>\n      <td>date</td>\n      <td>stock</td>\n      <td>price</td>\n    </tr>\n    <tr>\n      <td>2009-01-01</td>\n      <td>Boeing</td>\n      <td>$173.55</td>\n    </tr>\n    <tr>\n      <td>2009-01-01</td>\n      <td>Amazon</td>\n      <td>$174.90</td>\n    </tr>\n    <tr>\n      <td>2009-01-01</td>\n      <td>Google</td>\n      <td>$174.34</td>\n    </tr>\n    <tr>\n      <td>2009-01-02</td>\n      <td>Boeing</td>\n      <td>$172.61</td>\n    </tr>\n    <tr>\n      <td>2009-01-02</td>\n      <td>Amazon</td>\n      <td>$171.42</td>\n    </tr>\n    <tr>\n      <td>2009-01-02</td>\n      <td>Google</td>\n      <td>$170.04</td>\n    </tr>\n  </tbody>\n</table>\n\n::: { .pv4}\n✔️ Here, we have a long format where each observation is the combination of a date and a stock.\n:::\n:::\n:::\n:::\n\n::: footer\n\n:::\n\n## Tibbles {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   R works particularly well with [tidy data]{.b .green}\n\n::: {.fragment .mt1}\n-   We store tidy data in [data frames]{.b .green} or [tibbles]{.b .blue}\n    -   Tibbles are just fancier data frames<br />\n        (i.e., they have a few extra features)\n:::\n\n::: {.fragment .mt1}\n-   To use tibbles, we need the [tidyverse]{.b .blue} package\n:::\n\n::: {.fragment .mt1}\n-   Tibbles are constructed from one or more vectors\n    -   The vectors must have the [same length]{.b .green}\n    -   They can contain [different types]{.b .green} of data\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li jiievwhv trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Vectors {.smaller}\n\n![](../img/vectors.png)\n\n::: {.tc .pv4}\nWe start with three separate vector objects that all have the same length.\n\nWe set it up so that the $n$-th car in each train corresponds to the same observation.\n:::\n\n::: footer\n\n:::\n\n## Tibble {.smaller}\n\n![](../img/tibble.png)\n\n::: {.tc .pv4}\nThen we combine the vectors into a single tibble (or data frame) object.\n\nNow, as the tibble moves around, the variables always stay together.\n:::\n\n::: footer\n\n:::\n\n## Tibbles Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: Install and load the tidyverse package\n\n# Extras pane > Packages tab > Install\n\nlibrary(tidyverse)\n\n# ==============================================================================\n\n# LESSON: Create a tibble from vectors\n\nx <- c(10, 20, 30, 40)\nx\n\ny <- x * 2 - 4\ny\n\nmy_tibble <- tibble(x, y)\nmy_tibble\n\n# ==============================================================================\n\n# USECASE: You can mix different types of vectors in a single tibble\n\nfirst_names <- c(\"Adam\", \"Billy\", \"Caitlyn\", \"Debra\")\n\nage_years <- c(12, 13, 10, NA)\n\nguests <- tibble(first_names, age_years)\nguests\n\n# ==============================================================================\n\n# TIP: To save time, you can also create the vectors in the tibble call\n\ngradebook <- tibble(\n  grade = c(95, 83, 90, 76),\n  letter = c(\"a\", \"b\", \"a-\", \"c\")\n)\ngradebook\n\n# ==============================================================================\n\n# PITFALL: Don't try to combine tibbles with different lengths\n\ny <- c(1, 2, 3)\nx <- c(\"a\", \"b\")\n\ntibble(y, x) #error\n\n# ==============================================================================\n\n# LESSON: However, the exception is R will \"recycle\" a single value\n\ntibble(y, x = \"a\")\n\n# ==============================================================================\n\n# LESSON: You can \"extract\" a vector from a tibble using $\n\nmytibble <- tibble(x = c(1, 2, 3, 4, 5), y = \"test\")\n\nmytibble$x\n\nmytibble$y\n\n# ==============================================================================\n\n# PITFALL: Don't try to extract a vector that doesn't exist\n\nmytibble$z #error\n```\n:::\n\n\n::: footer\n\n:::\n\n## Importing and Exporting {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   Data is usually stored in [data files]{.b .green}\n    -   Importing files into R is called [reading]{.b .blue}\n    -   Exporting files from R is called [writing]{.b .blue}\n\n::: {.fragment .mt1}\n-   A convenient data file type is a CSV\n    -   This stands for [comma-separated values]{.b .green}\n    -   A CSV file is easy to share with other people\n:::\n\n::: {.fragment .mt1}\n-   The [tidyverse]{.b .green} package can read/write CSVs\n    -   Other packages can read/write other types\n        (e.g., *readxl*, *haven*, *rio*, *googlesheets4*)\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li dhkykqke trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Read/Write Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: Load the tidyverse package (if you haven't yet)\n\nlibrary(tidyverse)\n\n# ==============================================================================\n\n# USECASE: Create a tibble and write it to a file\n\ngradebook <- tibble(\n  id = c(123, 456, 789),\n  grade = c(\"A\", \"B\", \"A\")\n)\ngradebook\n\nwrite_csv(gradebook, file = \"gradebook.csv\")\n\n# NOTE: You can see the new file in Extras pane > Files tab.\n# You can open the file in another program (e.g., Microsoft Excel).\n# You can also email this file to someone else to share it.\n\n# ==============================================================================\n\n# PITFALL: Don't swap the order of the tibble and the file\n\nwrite_csv(\"gradebook.csv\", gradebook) # error\n\n# ==============================================================================\n\n# USECASE: Read in a file containing data\n\nold_gradebook <- read_csv(\"gradebook.csv\")\nold_gradebook\n\n# NOTE: read_csv() will examine and guess the data type of each variable.\n# You can tell it the data type of each variable, but that is more advanced.\n\n# ==============================================================================\n\n# PITFALL: Don't use the read.csv() and write.csv() functions\n\nold_gradebook <- read.csv(\"gradebook.csv\") # not a tibble\nold_gradebook\n```\n:::\n\n\n::: footer\n\n:::\n\n<!-- # [Practice II](https://pittmethods.github.io/r4ss/Day_1/Day1B_Practice.html){preview-link=\"false\"} -->\n\n\n# `Wrangle II`\n\n## Basic wrangling verbs {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [tidyverse]{.b .blue} provides tools for wrangling tibbles\n    -   These functions are named after *verbs*\n    -   So if you name your objects after *nouns*...\n    -   ...your code becomes easier to read\n\n::: {.fragment .mt1}\n| Noun(noun) ❌        |  Verb(noun)  ✔️  | \n|:----------------------|:----------------|\n| `blender(fruit)`      | `blend(fruit)`  |\n| `screwdriver(screw)`  | `drive(screw)`  |\n| `boxcutter(box)`      | `cut(box)`      |\n\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li sbiheqdr trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Column-focused verbs {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Select]{.b .blue} retains only certain columns/variables\n    -   [`select(TBL, VAR_KEEP, -VAR_DROP)`]{.f3}\n\n::: {.fragment .mt1}\n-   [Mutate]{.b .blue} adds or transforms columns/variables\n    -   [`mutate(TBL, NEW_VAR = OLD_VAR / 1000)`]{.f3}\n:::\n\n::: {.fragment .mt1}\n-   [Rename]{.b .green} changes the names of columns/variables\n    -   [`rename(TBL, NEW_NAME = OLD_NAME)`]{.f3}\n:::\n\n::: {.fragment .mt1}\n-   [Relocate]{.b .green} changes the order of columns/variables\n    -   [`relocate(TBL, VAR_MOVE, .after = OTHER_VAR)`]{.f3}\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li ifxlrnhk trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## *Select* Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: Load package and inspect example tibble\n\nlibrary(tidyverse) # includes the dplyr package\nstarwars\n\n# ==============================================================================\n\n# USECASE: Retain only the specified variables\n\nsw <- select(starwars, name)\nsw\nsw <- select(starwars, name, sex, species)\nsw\n\n# ==============================================================================\n\n# PITFALL: Don't forget to save the change with assignment\n\nselect(starwars, name, sex, species)\nstarwars # still includes all variables\n\n# ==============================================================================\n\n# USECASE: Retain all variables between two variables\n\nsw <- select(starwars, name, hair_color:eye_color)\nsw\n\n# ==============================================================================\n\n# USECASE: Retain all variables except the specified ones\n\nsw <- select(starwars, -sex, -species)\nsw\nsw <- select(starwars, -c(sex, species))\nsw\nsw <- select(starwars, -c(hair_color:starships))\nsw\n```\n:::\n\n\n::: footer\n\n:::\n\n## *Mutate* Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: Create example tibble\n\npatients <- tibble(\n  id = c(\"S1\", \"S2\", \"S3\"),\n  feet = c(6, 5, 5),\n  inches = c(1, 7, 2),\n  pounds = c(176.3, 124.9, 162.6)\n)\npatients\n\n# ==============================================================================\n\n# USECASE: Add one or more variables\n\np2 <- mutate(patients, sex = c(\"M\", \"F\", \"F\"))\np2\n\nages <- c(32, 41, 29)\np2 <- mutate(patients, ages = ages)\np2\n\np2 <- mutate(\n  patients, \n  sex = c(\"M\", \"F\", \"F\"), \n  ages = ages\n)\np2\n\n# ==============================================================================\n\n# USECASE: Compute variables\n\np2 <- mutate(patients, height = feet + inches / 12)\np2\n\np2 <- mutate(patients, ln_pounds = log(pounds))\np2\n\n# ==============================================================================\n\n# USECASE: Overwrite variables\n\npatients <- mutate(patients, height = height / 3.281)\npatients\n\n# ==============================================================================\n\n# USECASE: Duplicate variables\n\np2 <- mutate(patients, weight = pounds)\np2 # both weight and pounds exist\n```\n:::\n\n\n::: footer\n\n:::\n\n## *Rename* / *Relocate* Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# USECASE: Change the name of one or more variables\n\nstarwars\n\nsw <- rename(starwars, Character = name)\nsw\n\nsw <- rename(starwars, height_cm = height, mass_kg = mass)\nsw\n\n# ==============================================================================\n\n# PITFALL: Don't swap the order and try old_name = new_name\n\nsw <- rename(starwars, name = Character) # error\n\n# ==============================================================================\n\n# USECASE: Move variables before or after another variable\n\nstarwars\n\nsw <- relocate(starwars, species, sex, .before = height)\nsw\n\nsw <- relocate(starwars, species, sex, .after = name)\nsw\n\n# ==============================================================================\n\n# PITFALL: Don't forget the period!\n\nsw <- relocate(starwars, sex, before = height) \nsw # height was accidentally renamed to before\n```\n:::\n\n\n::: footer\n\n:::\n\n## Row-focused verbs {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Arrange]{.b .blue} sorts rows based on their values\n    -   [`arrange(TBL, VAR_SORT_UP)`]{.f3}\n    -   [`arrange(TBL, desc(VAR_SORT_DOWN))`]{.f3}\n    -   [`arrange(TBL, VAR_SORT_1ST, VAR_SORT_2ND)`]{.f3}\n\n::: {.fragment .mt1}\n-   [Filter]{.b .blue} retains certain rows based on criteria\n    -   [`filter(TBL, DBL_CRIT > 0)`]{.f3}\n    -   [`filter(TBL, STR_CRIT == \"A\")`]{.f3}\n    -   [`filter(TBL, CRIT1, CRIT2)`]{.f3}\n:::\n\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li dlprbpnx trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n\n## *Arrange* Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# USECASE: Sort observations by a variable\n\nstarwars\n\nsw <- arrange(starwars, height)\nsw # sorted by height, ascending\n\nsw <- arrange(starwars, name)\nsw # sorted by name, alphabetically\n\n# ==============================================================================\n\n# USECASE: Sort observations by a variable, in reverse order\n\nsw <- arrange(starwars, desc(height))\nsw # sorted by height, descending\n\nsw <- arrange(starwars, desc(name))\nsw # sorted by name, reverse-alphabetically\n\n# ==============================================================================\n\n# USECASE: Sort observations by multiple variables\n\nsw <- arrange(starwars, hair_color, mass)\nsw # sorted by hair_color, then ties broken by mass\n```\n:::\n\n\n::: footer\n\n:::\n\n## *Filter* Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# USECASE: Retain only observations that meet a criterion\n\nsw <- filter(starwars, mass > 100)\nsw # only observations with mass greater than 100\n\nsw <- filter(starwars, mass <= 100)\nsw # only observations with mass less than or equal to 100\n\nsw <- filter(starwars, species == \"Human\")\nsw # only observations with species equal to Human\n\nsw <- filter(starwars, species != \"Human\")\nsw # only observations with species not equal to Human\n\n# ==============================================================================\n\n# PITFALL: Don't try to use a single = for testing equality\n\nsw <- filter(starwars, height = 150) # error\n\nsw <- filter(starwars, height == 150) # correct\nsw \n\n# ==============================================================================\n\n# PITFALL: Don't forget that R is case-sensitive\n\nsw <- filter(starwars, species == \"human\")\nsw # no observations left (because it should be Human)\n\n# ==============================================================================\n\n# USECASE: Retain only observations that meet complex criteria\n\nsw <- filter(starwars, mass > 100 & height > 200)\nsw # only observations with mass over 100 AND height over 200\n\nsw <- filter(starwars, height < 100 | hair_color == \"none\")\nsw # only observations with height under 100 OR hair_color equal to none\n\n# ==============================================================================\n\n# PITFALL: Don't forget to complete both conditions\n\nsw <- filter(starwars, mass > 100 & < 200) # error\n\nsw <- filter(starwars, mass > 100 & mass < 200) # correct\nsw\n\n# ==============================================================================\n\n# PITFALL: Don't try to equate a string to a vector\n\nsw <- filter(starwars, species == c(\"Human\", \"Droid\")) # error\n\nsw <- filter(starwars, species %in% c(\"Human\", \"Droid\")) # correct\nsw\n```\n:::\n\n\n::: footer\n\n:::\n\n## *Filter* Cheatsheet {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\" .mytable}\n\n| Symbol | Description            | Num | Chr   |\n|--------|------------------------|-----|-------|\n| `<`    | Less than              | Yes | *No*  |\n| `<=`   | Less than or equal to  | Yes | *No*  |\n| `>`    | More than              | Yes | *No*  |\n| `>=`   | More than or equal to  | Yes | *No*  |\n| `==`   | Equal to               | Yes | Yes   |\n| `!=`   | Not equal to           | Yes | Yes   |\n| `%in%` | Found in               | Yes | Yes   |\n| `&`    | Logical And            | Yes | Yes   |\n| `|`    | Logical Or             | Yes | Yes   |\n\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li esixrdij trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n<!-- Program III -->\n\n# `Wrangle III`\n\n## `Pipes & Pipelines` {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n- How can we do [multiple operations]{.b .green} to an object?\n    1. `x <- 10`\n    2. `x2 <- sqrt(x)`\n    3. `x3 <- round(x2)`\n    \n::: {.fragment .mt1}\n- This works but is **cumbersome** and **error-prone**\n:::\n\n::: {.fragment .mt1}\n- A better approach is to use [pipes]{.b .blue} and [pipelines]{.b .green}\n    - `x3 <- 10 |> sqrt() |> round()`\n:::\n\n::: {.fragment .mt1}\n- I like to read `|>` as \"and then...\"\n    - \"Take 10 and then sqrt() and then round()\"\n:::\n    \n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li mhttdvjl trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Pipes Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: Enable the pipe operator shortcut\n\n# Tools > Global Options... > Code tab > Check \"Use Native Pipe Operator\"\n\n# Type out |> or press Ctrl+Shift+M (Windows) / Cmd+Shift+M (Mac)\n\n# ==============================================================================\n\n# LESSON: The pipe pushes objects to a function as its first argument\n\n# TEMPLATE: x |> function_name() is the same as function_name(x)\n\nx <- 10\n\ny <- sqrt(x)\ny\n\ny <- x |> sqrt()\ny\n\n# ==============================================================================\n\n# PITFALL: Don't forget to remove the object from the function call\n\nx |> sqrt(x) # wrong\n\nx |> sqrt() # correct\n\n# ==============================================================================\n\n# USECASE: You can still use arguments when piping\n\nz <- round(3.14, digits = 1)\nz\n\nz <- 3.14 |> round(digits = 1)\nz\n\n# ==============================================================================\n\n# USECASE: Pipes are useful with tibbles and wrangling verbs\n\nstarwars\n\nsw <- select(starwars, name, species, height)\nsw\n\nsw <- starwars |> select(name, species, height)\nsw\n\n# ==============================================================================\n\n# PITFALL: Don't add a pipe without a step after it\n\nsw <- starwars |> select(name, species, height) |> # error\n```\n:::\n\n\n::: footer\n\n:::\n\n## Pipelines Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# USECASE: You can chain multiple pipes together to make a pipeline\n\nx <- 10 |> sqrt() |> round()\nx\n\n# ==============================================================================\n\n# TIP: If you want to see the output of a pipeline, you can pipe to print()\n\nx <- 10 |> sqrt() |> round() |> print()\n\n# ==============================================================================\n\n# TIP: To make your pipelines more readable, move each step to a new line\n\nx <- \n  10 |> \n  sqrt() |> \n  round() |>\n  print()\n\n# ==============================================================================\n\n# PITFALL: Don't put the pipe at the beginning of a line, though\n\nx <- \n  10 \n  |> sqrt()\n  |> round()\n  |> print() # error\n\n# ==============================================================================\n\n# USECASE: Chain together a series of verbs to flexibly wrangle data\n\ntallones <- \n  starwars |> \n  select(name, species, height) |> \n  rename(height_cm = height) |> \n  mutate(height_ft = height_cm / 30.48) |>  \n  filter(height_ft > 7) |> \n  arrange(desc(height_ft)) |>  \n  print()\n```\n:::\n\n\n::: footer\n\n:::\n\n## Factors {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Factors]{.b .blue} are used to represent categorical data\n    -   Factors have multiple possible [levels]{.b .blue}\n    -   Levels are [discrete]{.b .green} and mutually-exclusive\n\n::: {.fragment .mt1}\n-   Sometimes categories are [unordered]{.b .green} (nominal)\n    -   Action or Comedy or Drama\n    -   Asia or Europe or North America\n:::\n\n::: {.fragment .mt1}\n-   Sometimes categories are [ordered]{.b .green} (ordinal)\n    -   Mild < Medium < Hot\n    -   XS < S < M < L < XL\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li cdbgwqyw trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Factors Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# USECASE: Ask 10 kids to order 1: nuggets, 2: pizza, or 3: salad\n\nfood <- c(2, 2, 1, 2, 1, 2, 1, 1, 2, 2)\nfood\n\n# ==============================================================================\n\n# LESSON: We can turn this vector into a factor with factor()\n\nfood2 <- factor(food, levels = c(1, 2, 3))\nfood2\n\nfood3 <- factor(food, levels = c(1, 2, 3),\n                labels = c(\"nuggets\", \"pizza\", \"salad\"))\nfood3\n\n# ==============================================================================\n\n# USECASE: We can also quickly and easily count each level with table()\n\ntable(food3)\n\n# ==============================================================================\n\n# PITFALL: Don't confuse levels and labels\n\nfood4 <- factor(food, labels = c(1, 2, 3),\n                levels = c(\"nuggets\", \"pizza\", \"salad\"))\nfood4 # full of <NA> because it can't find these levels\n\n# ==============================================================================\n\n# USECASE: You can also just enter strings directly (as self-labels)\n\ngenre <- c(\"pop\", \"metal\", \"pop\", \"rock\", \"rap\", \"rap\", \"pop\", \"rock\")\ngenre\n\ngenre2 <- factor(genre) # observed levels will be assigned alphabetically\ngenre2\n\ntable(genre2)\n\n# ==============================================================================\n\n# LESSON: If ordinal, enter levels low-to-high and add ordered = TRUE\n\nsalsa <- c(\"hot\", \"mild\", \"medium\", \"mild\", \"medium\", \"medium\")\n\nsalsa2 <- factor(salsa, \n                 levels = c(\"mild\", \"medium\", \"hot\"), \n                 ordered = TRUE)\nsalsa2 \n\n# NOTE: We may want to visualize or model ordinal factors differently\n\n# ==============================================================================\n\n# USECASE: Working with factors in a tibble\n\ncereal <- read_csv(\"cereal.csv\")\ncereal\n\ncereal2 <- mutate(cereal, mfr = factor(mfr), type = factor(type))\ncereal2\n\ntable(cereal2$mfr)\n\ntable(cereal2$type)\n```\n:::\n\n\n::: footer\n\n:::\n\n## Missing Values {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   Sometimes your data will have [missing values]{.b .blue}\n    -   Perhaps these were [never collected]{.b .green}\n    -   Perhaps the values were [lost/corrupted]{.b .green}\n    -   Perhaps the participant [didn't respond]{.b .green}\n\n::: {.fragment .mt1}\n-   We need to tell R which values are missing\n    -   To do so, we set those values to `NA`\n    -   Functions from **tidyverse** make this easy\n:::\n\n::: {.fragment .mt1}\n-   Missingness is often [\"contagious\"]{.b .green} in R<br />\n    e.g., a vector with `NA` has an unknown mean\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li rwotyanb trigger=loop delay=3000 speed=0.5 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Missing Values Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse for the read and mutate functions\n\nlibrary(tidyverse)\n\n# ==============================================================================\n\n# PITFALL: Number codes for missingness will mess up calculations in R\n\nheights <- c(149, 158, -999) # here we use -999 to represent a missing value\n\nrange(heights)\n\nmean(heights)\n\nlog(heights) # our missing value is no longer -999\n\n# ==============================================================================\n\n# USECASE: Use NA for missingness instead\n\nheights2 <- c(149, 158, NA)\nheights2\n\nlog(heights2) # the NA stayed an NA (due to contagiousness)\n\n# ==============================================================================\n\n# LESSON: Use na.rm = TRUE to do a summary function ignoring the NAs\n\nmean(heights2) # the mean is an NA (due to contagiousness)\n\nmean(heights2, na.rm = TRUE)\n\nrange(heights2, na.rm = TRUE)\n\n# ==============================================================================\n\n# USECASE: Dealing with missing values in tibbles\n\ncereal <- read_csv(\"cereal.csv\")\n\ncereal$rating\n\nrange(cereal$rating)\n\n# ==============================================================================\n\n# LESSON: Use na_if() to convert specific values to NA while mutating\n\ncereal2 <- mutate(cereal, rating = na_if(rating, -999))\n\ncereal2$rating\n\nrange(cereal2$rating, na.rm = TRUE)\n\n# ==============================================================================\n\n# LESSON: Use read_csv(na) to convert specific values to NA while reading\n\ncereal3 <- read_csv(\"cereal.csv\", na = \"-999\")\n\ncereal3$rating\n\nrange(cereal3$rating, na.rm = TRUE)\n```\n:::\n\n\n::: footer\n\n:::\n\n<!-- Practice III -->\n\n<!-- # [Practice III](https://pittmethods.github.io/r4ss/Day_2/Day2A_Practice.html){preview-link=\"false\"} -->\n\n\n\n# `Wrangle IV`\n\n## Summarize {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   Although we store data about many observations...\n-   ...we often want to [summarize across]{.b .blue} observations\n    -   This is like [folding]{.b .green} the tibble down to [one row]{.b .green}\n\n::: {.fragment .mt1}\n-   We've seen functions that summarize vectors\n    -   `length()`, `sum()`, `min()`, `max()`\n    -   `mean()`, `median()`, `sd()`, `var()`\n:::\n\n::: {.fragment .mt1}\n-   `summarize()` lets us use them on tibbles\n    -   It works very similarly to `mutate()`\n    -   It always creates a tibble as output\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li uhmqrsgl trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Summarize Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nsales <- \n  tibble(\n    customer = c(1, 2, 3, 1, 3),\n    store = c(\"A\", \"A\", \"A\", \"B\", \"B\"),\n    items = c(25, 20, 16, 10, 5),\n    spent = c(685, 590, 392, 185, 123)\n  ) |> \n  print()\n\n# ==============================================================================\n\n# USECASE: Summarize the typical sales\n\nmy_summary <- \n  sales |> \n  summarize(\n    avg_items = mean(items),\n    avg_spent = mean(spent)\n  ) |> \n  print()\n\n# ==============================================================================\n\n# PITFALL: Don't use summary() instead of summarize()\n\nmy_summary <- \n  sales |> \n  summary(\n    avg_items = mean(items),\n    avg_spent = mean(spent)\n  ) |> \n  print() # not a tibble\n\n# ==============================================================================\n\n# USECASE: Use more than one summary function\n\nmy_summary <- \n  sales |> \n  summarize(\n    total_items = sum(items),\n    total_spent = sum(spent),\n    avg_items = mean(items),\n    avg_spent = mean(spent)\n  ) |> \n  print()\n\n# ==============================================================================\n\n# USECASE: Use counting functions\n\nmy_counts <- \n  sales |> \n  summarize(\n    n_sales = n(),\n    n_customers = n_distinct(customer),\n    n_stores = n_distinct(store)\n  ) |> \n  print()\n```\n:::\n\n\n::: footer\n\n:::\n\n## Group Summarize {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n- We can also summarize a tibble [by group]{.b .blue}\n    -   This is like [folding]{.b .green} the tibble multiple times\n    -   Specifically, we fold down to [one row per group]{.b .green}\n\n::: {.fragment .mt1}\n-   The syntax for summarize is identical\n    -   The only difference is to the tibble\n    -   We first pass it through `group_by()`\n    -   Pipelines make this very easy\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li pmwtbpap trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Group Summarize Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nsales <- \n  tibble(\n    customer = c(1, 2, 3, 1, 3),\n    store = c(\"A\", \"A\", \"A\", \"B\", \"B\"),\n    items = c(25, 20, 16, 10, 5),\n    spent = c(685, 590, 392, 185, 123)\n  ) |> \n  print()\n\n# ==============================================================================\n\n# LESSON: We pass a tibble through group_by to group it\n\nsales\n\nsales |> group_by(store) # note the display says \"grouped\"\n\n# ==============================================================================\n\n# USECASE: We can then summarize and get stats per group\n\nsales |> \n  group_by(store) |> \n  summarize(\n    customers = n_distinct(customer),\n    items_sold = sum(items),\n    total_sales = sum(spent),\n    avg_items = mean(items),\n    avg_spent = mean(spent)\n  )\n\n# ==============================================================================\n\n# SETUP: Let's get a larger, more realistic dataset\n\n# Extra pane > Packages tab > Install > nycflights13\n\nlibrary(\"nycflights13\")\n\nflights\n\n# ==============================================================================\n\n# USECASE: Find the carrier with the lowest average delays\n\nflights |> \n  group_by(carrier) |> \n  summarize(m_delay = mean(dep_delay, na.rm = TRUE)) |> \n  arrange(m_delay)\n\n# ==============================================================================\n\n# LESSON: We can also group by multiple variables\n\n# USECASE: Let's find the day of the year with the most flights\n\nflights |> \n  group_by(month, day) |> \n  summarize(n_flights = n()) |> \n  arrange(desc(n_flights))\n```\n:::\n\n\n::: footer\n\n:::\n\n<!-- Visualize I -->\n\n# Visualize I\n\n## What is a graphic? {.smaller}\n\n::: {.pv4 .tc}\n![](../img/graphics.png)\n\n::: {.fragment}\nA [data visualization]{.b .blue} expresses [data]{.b .green} through [visual aesthetics]{.b .green}.\n:::\n:::\n\n::: footer\n\n:::\n\n## Describing Graphics {.smaller}\n\n::: {.pv4 .tc}\n\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![](slide_tidy1_files/figure-revealjs/graphics1-1.png){width=960}\n:::\n\n::: {.cell-output-display}\n![](slide_tidy1_files/figure-revealjs/graphics1-2.png){width=960}\n:::\n:::\n\n\n::: {.fragment}\nSome simple graphics are [easy to describe]{.b .green} and may even have [ready names]{.b .blue}.\n:::\n:::\n\n::: footer\n\n:::\n\n## Describing Graphics {.smaller}\n\n::: {.pv4 .tc}\n\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![](slide_tidy1_files/figure-revealjs/graphics2-1.png){width=960}\n:::\n\n::: {.cell-output-display}\n![](slide_tidy1_files/figure-revealjs/graphics2-2.png){width=960}\n:::\n:::\n\n\n::: {.fragment}\nA [grammar of graphics]{.b .blue} will help us describe more [complex]{.b .green} graphics.\n:::\n:::\n\n::: footer\n\n:::\n\n## The Grammar of Graphics {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   The [grammar of graphics]{.b .blue} is a set of rules for [describing]{.b .green} and [creating]{.b .green} data visualizations\n\n::: {.fragment .mt1}\n-   To make our data visual (and therefore put our highly evolved occipital lobes to work)...\n    -   We connect [variables]{.b .blue} to [visual qualities]{.b .green}\n    -   We represent [observations]{.b .blue} as [visual objects]{.b .green}\n:::\n\n::: {.fragment .mt1}\n-   This requires some *fundamental* elements\n    -   We will first learn about them in lecture\n    -   We will then apply them in R using \\{ggplot2\\}\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n<!-- {{< li ksoxpinm trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}} -->\n![](../img/gglayers.png)\n:::\n:::\n\n::: footer\n\n:::\n\n## Data {.smaller}\n\n::: {.pv4 .tc}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   <chr>        <chr>      <dbl> <int> <int> <chr> <chr> <int> <int> <chr> <chr>\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# ℹ 224 more rows\n```\n\n\n:::\n:::\n\n\n::: {.fragment .mt1}\nGraphics require [data]{.b .blue} (e.g., tibbles), which describe [observations]{.b .green} using [variables]{.b .green}.\n:::\n:::\n\n::: footer\n\n:::\n\n## Aesthetic Mappings {.smaller}\n\n::: {.pv4 .tc}\n\n![](../img/aes.png)\n\n::: {.fragment}\nGraphics require [aesthetic mappings]{.b .blue}, which connect [data variables]{.b .green} to [visual qualities]{.b .green}.\n:::\n:::\n\n::: footer\n\n:::\n\n## Scales {.smaller}\n\n::: {.pv4 .tc}\n\n::: {layout-ncol=2}\n![](../img/position.png)\n\n![](../img/otherscale.png)\n:::\n\n::: {.fragment .mt1}\nGraphics require [scales]{.b .blue}, which connect specific [data *values*]{.b .green} to specific [aesthetic *values*]{.b .green}.\n:::\n:::\n\n::: footer\n\n:::\n\n## Geometric Objects {.smaller}\n\n::: {.pv4 .tc}\n\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![](slide_tidy1_files/figure-revealjs/geoms-1.png){width=960}\n:::\n\n::: {.cell-output-display}\n![](slide_tidy1_files/figure-revealjs/geoms-2.png){width=960}\n:::\n:::\n\n\n::: {.fragment .mt1}\nGraphics require [geometric objects]{.b .blue} (geoms), which [represent the observations]{.b .green}.\n:::\n:::\n\n::: footer\n\n:::\n\n## ggplot2 Basics {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   The [ggplot2]{.b .blue} package is a part of tidyverse\n    -   No need to install or load it separately\n    -   It plays nicely with tibbles and wrangling\n\n::: {.fragment .mt1}\n-   It implements the [grammar of graphics]{.b .green} in R\n    -   The \"gg\" stands for \"grammar of graphics\"\n    -   Thus, we will need to provide all four elements\n:::\n\n::: {.fragment .mt1}\n-   We will create a [pseudo-pipeline]{.b .green} of commands\n    -   However, we will use `+` rather than `|>`\n    -   This is because \\{ggplot2\\} predates the R pipe\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li gkeohday trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## ggplot2 Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nmpg\n\n# ==============================================================================\n\n# LESSON: First, set the data to a tibble\np <- ggplot(data = mpg)\np\n\n# ==============================================================================\n\n# LESSON: Next, set the aesthetic mappings with aes()\n\np <- ggplot(data = mpg, mapping = aes(x = displ, y = hwy))\np\n\n# ==============================================================================\n\n# TIP: You can leave off the optional argument names\n\np <- ggplot(mpg, aes(x = displ, y = hwy))\np\n\n# ==============================================================================\n\n# LESSON: Next, set the positional scales\n\np <- ggplot(mpg, aes(x = displ, y = hwy)) +\n  scale_x_continuous(\n    name = \"Engine Size (in liters)\", \n    limits = c(1, 7), \n    breaks = 1:7\n  ) +\n  scale_y_continuous(\n    name = \"Highway Fuel Efficiency (in miles/gallon)\",\n    limits = c(10, 50),\n    breaks = c(10, 20, 30, 40, 50)\n  )\np\n\n# ==============================================================================\n\n# LESSON: Finally, add a point geom\n\np <- \n  ggplot(mpg, aes(x = displ, y = hwy)) + \n  scale_x_continuous(\n    name = \"Engine Size (in liters)\", \n    limits = c(1, 7), \n    breaks = 1:7\n  ) +\n  scale_y_continuous(\n    name = \"Highway Fuel Efficiency (in miles/gallon)\",\n    limits = c(10, 50),\n    breaks = c(10, 20, 30, 40, 50)\n  ) +\n  geom_point()\n\n# ==============================================================================\n\n# TIP: If you leave off the scales, R will try to guess\n\np <- ggplot(mpg, aes(x = displ, y = hwy)) + geom_point()\np\n\n# ==============================================================================\n\n# LESSON: We can also customize the geom with arguments\n\np <- ggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point(color = \"red\", shape = \"square\", size = 2)\np\n```\n:::\n\n\n::: footer\n\n:::\n\n## Basic Layering {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   ggplot2 uses a [layered]{.b .blue} grammar of graphics\n    -   We can keep [stacking geoms]{.b .green} on top\n\n::: {.fragment .mt1}\n-   Layering adds a lot of possibilities\n    -   We can convey [more complex]{.b .green} ideas\n    -   We can learn more about our data\n:::\n\n::: {.fragment .mt1}\n-   But we can still describe these graphics\n    -   Just [describe each layer]{.b .green} in turn\n    -   And describe the layers' ordering\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li ikwcijxm trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Basic Layering Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nmpg\n\n# ==============================================================================\n\n# USECASE: Add a smooth geom (i.e., line of best fit)\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_smooth()\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n# ==============================================================================\n\n# USECASE: Add a line geom (i.e., connecting points)\n\neconomics\n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_point()\n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_point() +\n  geom_line(color = \"orange\", size = 1)\n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_line(color = \"orange\", size = 1) +\n  geom_point()\n\n# ==============================================================================\n\n# USECASE: Add reference line geoms\n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_hline(yintercept = 0, color = \"orange\", size = 1) +\n  geom_line(color = \"blue\", size = 1) +\n  geom_point()\n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_vline(xintercept = 7.5, color = \"orange\", size = 1) +\n  geom_line(color = \"blue\", size = 1) +\n  geom_point() \n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_abline(intercept = 4000, slope = 0.5, color = \"orange\", size = 1) +\n  geom_line(color = \"blue\", size = 1) +\n  geom_point() \n```\n:::\n\n\n::: footer\n\n:::\n\n## Working with Color {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   Color scales come in two main types:\n    -   [Discrete]{.b .blue} scales have [separate colors]{.b .green}\n        -   Best with factor variables\n    -   [Continuous]{.b .blue} scales [form a gradient]{.b .green}\n        -   Best with numeric variables\n\n::: {.fragment .mt1}\n-   There are two ways to control color:\n    -   You can [map color]{.b .blue} to a [variable]{.b .green}\n        -   It will take on *different* values\n    -   You can [set color]{.b .blue} to a [value]{.b .green}\n        -   It will take on *one* value only\n:::\n\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li fiivuxdi trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Color Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nmpg\n\n# ==============================================================================\n\n# USECASE: Continuous color scales work well with numeric variables\n\nggplot(mpg, aes(x = hwy, y = cty, color = displ)) +\n  geom_point(size = 4)\n\nggplot(mpg, aes(x = hwy, y = cty, color = displ)) +\n  geom_point(size = 4) +\n  scale_color_continuous(type = \"viridis\")\n\n# ==============================================================================\n\n# USECASE: Use a discrete color scale with categorical variables\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point()\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  scale_color_discrete(\n    name = \"Drivetrain\", \n    breaks = c(\"4\", \"f\", \"r\"), \n    labels = c(\"Four Wheel\", \"Front Wheel\", \"Rear Wheel\")\n  )\n\n# ==============================================================================\n\n# PITFALL: Don't forget to set categorical variables as factors\n\nggplot(mpg, aes(x = displ, y = hwy, color = cyl)) + \n  geom_point() # R guesses you want a continuous scale\n\nggplot(mpg, aes(x = displ, y = hwy, color = factor(cyl))) + \n  geom_point() + \n  scale_color_discrete(name = \"Cylinders\")\n\n# ==============================================================================\n\n# LESSON: Set a geom's color aesthetic to make it always that color\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(color = \"red\")\n\n# ==============================================================================\n\n# PITFALL: However, do this inside of geom() not aes()\n\nggplot(mpg, aes(x = displ, y = hwy, color = \"blue\")) + \n  geom_point() #unintended\n\n# ==============================================================================\n\n# LESSON: If you both set and map color, the setting will win\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) + \n  geom_point(color = \"blue\") \n```\n:::\n\n\n::: footer\n\n:::\n\n## Themes {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Themes]{.b .blue} control how non-data elements look\n    -   e.g., how thick to draw the gridlines\n    -   e.g., where to position the legend\n\n::: {.fragment .mt1}\n-   [Complete themes]{.b .green} change many elements at once\n    -   Some are built into ggplot2\n    -   Others come in R packages\n    -   \\{papaja\\} provides `theme_apa()`\n:::\n\n::: {.fragment .mt1}\n-   [Individual elements]{.b .green} can be customized too\n    -   To do so, use `theme()` and [this reference](https://ggplot2.tidyverse.org/reference/element.html)\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li hbkyydsg trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Themes Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example graphic\n\nlibrary(tidyverse)\n\np <- \n  ggplot(mpg, aes(x = displ, y = hwy, color = drv)) + \n  geom_point() +\n  labs(title = \"Fuel Efficiency\")\np\n\n# ==============================================================================\n\n# USECASE: Apply a \"complete\" theme\n\np + theme_bw()\n\np + theme_classic()\n\np + theme_dark()\n\n# ==============================================================================\n\n# LESSON: More more precise control, we can use theme()\n\np + theme(legend.position = \"top\")\n\np + theme(plot.title = element_text(color = \"purple\", face = \"bold\"))\n\np + theme(panel.grid = element_blank())\n\n# NOTE: There are a lot of elements to learn, so use a cheatsheet!\n```\n:::\n\n\n::: footer\n\n:::\n\n## Exporting Graphics {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   We may need to [export graphics]{.b .blue} from R\n    -   e.g., for a paper, poster, or presentation\n\n::: {.fragment .mt1}\n-   This job is handling fantastically by `ggsave()`\n    -   We can create many types of files\n    -   We can customize the exact size\n:::\n\n::: {.fragment .mt1}\n-   I recommend `.png` for most daily purposes\n    -   For publishing, I prefer `.pdf` or `.svg`\n    -   They retain perfect quality at any zoom\n    -   You can send these files to most publishers\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li amfaktum trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\n:::\n\n## Exporting Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example graphic\n\nlibrary(tidyverse)\n\np <- ggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point() + geom_smooth() +\n  labs(x = \"Engine Displacement\", y = \"Highway MPG\")\np\n\n# ==============================================================================\n\n# USECASE: Save a specific ggplot object to a file\n\nggsave(filename = \"pfinal.png\", plot = p)\n\n# ==============================================================================\n\n# LESSON: Specify the size of the file to create\n\nggsave(filename = \"pfinal2.png\", plot = p, \n       width = 6, height = 3, units = \"in\")\n\n# ==============================================================================\n\n# LESSON: Just change the extension to create a different file type\n\nggsave(filename = \"pfinal2.pdf\", plot = p, \n       width = 6, height = 3, units = \"in\")\n\n# ==============================================================================\n\n# PITFALL: Creating a very large file may lead to small text\n\nggsave(filename = \"p_poster.png\", plot = p, \n       width = 12, height = 8, units = \"in\")\n\n# ==============================================================================\n\n# TIP: You can quickly increase the text size using base_size\n\np2 <- p + theme_grey(base_size = 24)\n\nggsave(filename = \"p_poster2.png\", plot = p2,\n       width = 12, height = 8, units = \"in\")\n```\n:::\n\n\n::: footer\n\n:::\n\n<!-- Practice IV -->\n\n<!-- # [Practice IV](https://pittmethods.github.io/r4ss/Day_2/Day2B_Practice.html){preview-link=\"false\"} -->\n\n",
    "supporting": [
      "slide_tidy1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}