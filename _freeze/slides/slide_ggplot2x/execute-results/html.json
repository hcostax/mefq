{
  "hash": "0695570ca2e4eebd026343fba24b85e2",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: \n  revealjs:\n    css: ../styles.css\n    slide-number: true\n    show-slide-number: all\n    preview-links: auto\n    self-contained: true\n    progress: true\n    history: true\n    hash-type: number\n    theme: default\n    code-block-background: true\n    highlight-style: zenburn\n    code-link: false\n    code-copy: true\n    pagetitle: \"Dados e R\"\n    author-meta: \"Henrique Costa\"\n    date-meta: \"2024-08-19\"\n    df-print: paged\n---\n\n\n\n::: {.my-title}\n# [Dados e R]{.blue} <br />Data Wrangling & DataViz\n\n::: {.my-grey}\n[Encontro 2 | 19/08/20024]{}<br />\n[Henrique Costa | Métodos Estratégicos em FinQuant]{}\n:::\n\n<!-- ![](../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400} -->\n:::\n\n<!-- Wrangle III -->\n\n# Wrangle III\n\n## Summarize {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   Although we store data about many observations...\n-   ...we often want to [summarize across]{.b .blue} observations\n    -   This is like [folding]{.b .green} the tibble down to [one row]{.b .green}\n\n::: {.fragment .mt1}\n-   We've seen functions that summarize vectors\n    -   `length()`, `sum()`, `min()`, `max()`\n    -   `mean()`, `median()`, `sd()`, `var()`\n:::\n\n::: {.fragment .mt1}\n-   `summarize()` lets us use them on tibbles\n    -   It works very similarly to `mutate()`\n    -   It always creates a tibble as output\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n\n{{< li uhmqrsgl trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n\n:::\n:::\n\n::: footer\n\\[2B\\] Wrangle III\n:::\n\n## Summarize Live Coding\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nsales <- \n  tibble(\n    customer = c(1, 2, 3, 1, 3),\n    store = c(\"A\", \"A\", \"A\", \"B\", \"B\"),\n    items = c(25, 20, 16, 10, 5),\n    spent = c(685, 590, 392, 185, 123)\n  ) |> \n  print()\n\n# ==============================================================================\n\n# USECASE: Summarize the typical sales\n\nmy_summary <- \n  sales |> \n  summarize(\n    avg_items = mean(items),\n    avg_spent = mean(spent)\n  ) |> \n  print()\n\n# ==============================================================================\n\n# PITFALL: Don't use summary() instead of summarize()\n\nmy_summary <- \n  sales |> \n  summary(\n    avg_items = mean(items),\n    avg_spent = mean(spent)\n  ) |> \n  print() # not a tibble\n\n# ==============================================================================\n\n# USECASE: Use more than one summary function\n\nmy_summary <- \n  sales |> \n  summarize(\n    total_items = sum(items),\n    total_spent = sum(spent),\n    avg_items = mean(items),\n    avg_spent = mean(spent)\n  ) |> \n  print()\n\n# ==============================================================================\n\n# USECASE: Use counting functions\n\nmy_counts <- \n  sales |> \n  summarize(\n    n_sales = n(),\n    n_customers = n_distinct(customer),\n    n_stores = n_distinct(store)\n  ) |> \n  print()\n```\n:::\n\n\n\n::: footer\n\\[2A\\] Wrangle III\n:::\n\n## Group Summarize {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n- We can also summarize a tibble [by group]{.b .blue}\n    -   This is like [folding]{.b .green} the tibble multiple times\n    -   Specifically, we fold down to [one row per group]{.b .green}\n\n::: {.fragment .mt1}\n-   The syntax for summarize is identical\n    -   The only difference is to the tibble\n    -   We first pass it through `group_by()`\n    -   Pipelines make this very easy\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n\n{{< li pmwtbpap trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n\n:::\n:::\n\n::: footer\n\\[2B\\] Wrangle III\n:::\n\n## Group Summarize Live Coding\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nsales <- \n  tibble(\n    customer = c(1, 2, 3, 1, 3),\n    store = c(\"A\", \"A\", \"A\", \"B\", \"B\"),\n    items = c(25, 20, 16, 10, 5),\n    spent = c(685, 590, 392, 185, 123)\n  ) |> \n  print()\n\n# ==============================================================================\n\n# LESSON: We pass a tibble through group_by to group it\n\nsales\n\nsales |> group_by(store) # note the display says \"grouped\"\n\n# ==============================================================================\n\n# USECASE: We can then summarize and get stats per group\n\nsales |> \n  group_by(store) |> \n  summarize(\n    customers = n_distinct(customer),\n    items_sold = sum(items),\n    total_sales = sum(spent),\n    avg_items = mean(items),\n    avg_spent = mean(spent)\n  )\n\n# ==============================================================================\n\n# SETUP: Let's get a larger, more realistic dataset\n\n# Extra pane > Packages tab > Install > nycflights13\n\nlibrary(\"nycflights13\")\n\nflights\n\n# ==============================================================================\n\n# USECASE: Find the carrier with the lowest average delays\n\nflights |> \n  group_by(carrier) |> \n  summarize(m_delay = mean(dep_delay, na.rm = TRUE)) |> \n  arrange(m_delay)\n\n# ==============================================================================\n\n# LESSON: We can also group by multiple variables\n\n# USECASE: Let's find the day of the year with the most flights\n\nflights |> \n  group_by(month, day) |> \n  summarize(n_flights = n()) |> \n  arrange(desc(n_flights))\n```\n:::\n\n\n\n::: footer\n\\[2B\\] Wrangle III\n:::\n\n<!-- Visualize I -->\n\n# Visualize I\n\n## What is a graphic? {.smaller}\n\n::: {.pv4 .tc}\n![](../img/graphics.png)\n\n::: {.fragment}\nA [data visualization]{.b .blue} expresses [data]{.b .green} through [visual aesthetics]{.b .green}.\n:::\n:::\n\n::: footer\n\\[2B\\] Visualize I\n:::\n\n## Describing Graphics {.smaller}\n\n::: {.pv4 .tc}\n\n\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![](slide_ggplot2x_files/figure-html/graphics1-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](slide_ggplot2x_files/figure-html/graphics1-2.png){width=672}\n:::\n:::\n\n\n\n::: {.fragment}\nSome simple graphics are [easy to describe]{.b .green} and may even have [ready names]{.b .blue}.\n:::\n:::\n\n::: footer\n\\[2B\\] Visualize I\n:::\n\n## Describing Graphics {.smaller}\n\n::: {.pv4 .tc}\n\n\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](slide_ggplot2x_files/figure-html/graphics2-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](slide_ggplot2x_files/figure-html/graphics2-2.png){width=672}\n:::\n:::\n\n\n\n::: {.fragment}\nA [grammar of graphics]{.b .blue} will help us describe more [complex]{.b .green} graphics.\n:::\n:::\n\n::: footer\n\\[2B\\] Visualize I\n:::\n\n## The Grammar of Graphics {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   The [grammar of graphics]{.b .blue} is a set of rules for [describing]{.b .green} and [creating]{.b .green} data visualizations\n\n::: {.fragment .mt1}\n-   To make our data visual (and therefore put our highly evolved occipital lobes to work)...\n    -   We connect [variables]{.b .blue} to [visual qualities]{.b .green}\n    -   We represent [observations]{.b .blue} as [visual objects]{.b .green}\n:::\n\n::: {.fragment .mt1}\n-   This requires four *fundamental* elements\n    -   We will first learn about them in lecture\n    -   We will then apply them in R using \\{ggplot2\\}\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n\n{{< li ksoxpinm trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n\n:::\n:::\n\n::: footer\n\\[2B\\] Visualize I\n:::\n\n## Data {.smaller}\n\n::: {.pv4 .tc}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   <chr>        <chr>      <dbl> <int> <int> <chr> <chr> <int> <int> <chr> <chr>\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# ℹ 224 more rows\n```\n\n\n:::\n:::\n\n\n\n::: {.fragment .mt1}\nGraphics require [data]{.b .blue} (e.g., tibbles), which describe [observations]{.b .green} using [variables]{.b .green}.\n:::\n:::\n\n::: footer\n\\[2B\\] Visualize I\n:::\n\n## Aesthetic Mappings {.smaller}\n\n::: {.pv4 .tc}\n\n![](../img/aes.png)\n\n::: {.fragment}\nGraphics require [aesthetic mappings]{.b .blue}, which connect [data variables]{.b .green} to [visual qualities]{.b .green}.\n:::\n:::\n\n::: footer\n\\[2B\\] Visualize I\n:::\n\n## Scales {.smaller}\n\n::: {.pv4 .tc}\n\n::: {layout-ncol=2}\n![](../img/position.png)\n\n![](../img/otherscale.png)\n:::\n\n::: {.fragment .mt1}\nGraphics require [scales]{.b .blue}, which connect specific [data *values*]{.b .green} to specific [aesthetic *values*]{.b .green}.\n:::\n:::\n\n::: footer\n\\[2B\\] Visualize I\n:::\n\n## Geometric Objects {.smaller}\n\n::: {.pv4 .tc}\n\n\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![](slide_ggplot2x_files/figure-html/geoms-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](slide_ggplot2x_files/figure-html/geoms-2.png){width=672}\n:::\n:::\n\n\n\n::: {.fragment .mt1}\nGraphics require [geometric objects]{.b .blue} (geoms), which [represent the observations]{.b .green}.\n:::\n:::\n\n::: footer\n\\[2B\\] Visualize I\n:::\n\n## ggplot2 Basics {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   The [ggplot2]{.b .blue} package is a part of tidyverse\n    -   No need to install or load it separately\n    -   It plays nicely with tibbles and wrangling\n\n::: {.fragment .mt1}\n-   It implements the [grammar of graphics]{.b .green} in R\n    -   The \"gg\" stands for \"grammar of graphics\"\n    -   Thus, we will need to provide all four elements\n:::\n\n::: {.fragment .mt1}\n-   We will create a [pseudo-pipeline]{.b .green} of commands\n    -   However, we will use `+` rather than `|>`\n    -   This is because \\{ggplot2\\} predates the R pipe\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n\n{{< li gkeohday trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n\n:::\n:::\n\n::: footer\n\\[2B\\] Visualize I\n:::\n\n## ggplot2 Live Coding\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nmpg\n\n# ==============================================================================\n\n# LESSON: First, set the data to a tibble\np <- ggplot(data = mpg)\np\n\n# ==============================================================================\n\n# LESSON: Next, set the aesthetic mappings with aes()\n\np <- ggplot(data = mpg, mapping = aes(x = displ, y = hwy))\np\n\n# ==============================================================================\n\n# TIP: You can leave off the optional argument names\n\np <- ggplot(mpg, aes(x = displ, y = hwy))\np\n\n# ==============================================================================\n\n# LESSON: Next, set the positional scales\n\np <- ggplot(mpg, aes(x = displ, y = hwy)) +\n  scale_x_continuous(\n    name = \"Engine Size (in liters)\", \n    limits = c(1, 7), \n    breaks = 1:7\n  ) +\n  scale_y_continuous(\n    name = \"Highway Fuel Efficiency (in miles/gallon)\",\n    limits = c(10, 50),\n    breaks = c(10, 20, 30, 40, 50)\n  )\np\n\n# ==============================================================================\n\n# LESSON: Finally, add a point geom\n\np <- \n  ggplot(mpg, aes(x = displ, y = hwy)) + \n  scale_x_continuous(\n    name = \"Engine Size (in liters)\", \n    limits = c(1, 7), \n    breaks = 1:7\n  ) +\n  scale_y_continuous(\n    name = \"Highway Fuel Efficiency (in miles/gallon)\",\n    limits = c(10, 50),\n    breaks = c(10, 20, 30, 40, 50)\n  ) +\n  geom_point()\n\n# ==============================================================================\n\n# TIP: If you leave off the scales, R will try to guess\n\np <- ggplot(mpg, aes(x = displ, y = hwy)) + geom_point()\np\n\n# ==============================================================================\n\n# LESSON: We can also customize the geom with arguments\n\np <- ggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point(color = \"red\", shape = \"square\", size = 2)\np\n```\n:::\n\n\n\n::: footer\n\\[2B\\] Visualize I\n:::\n\n## Basic Layering {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   ggplot2 uses a [layered]{.b .blue} grammar of graphics\n    -   We can keep [stacking geoms]{.b .green} on top\n\n::: {.fragment .mt1}\n-   Layering adds a lot of possibilities\n    -   We can convey [more complex]{.b .green} ideas\n    -   We can learn more about our data\n:::\n\n::: {.fragment .mt1}\n-   But we can still describe these graphics\n    -   Just [describe each layer]{.b .green} in turn\n    -   And describe the layers' ordering\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n\n{{< li ikwcijxm trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n\n:::\n:::\n\n::: footer\n\\[2B\\] Visualize I\n:::\n\n## Basic Layering Live Coding\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nmpg\n\n# ==============================================================================\n\n# USECASE: Add a smooth geom (i.e., line of best fit)\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_smooth()\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n# ==============================================================================\n\n# USECASE: Add a line geom (i.e., connecting points)\n\neconomics\n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_point()\n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_point() +\n  geom_line(color = \"orange\", size = 1)\n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_line(color = \"orange\", size = 1) +\n  geom_point()\n\n# ==============================================================================\n\n# USECASE: Add reference line geoms\n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_hline(yintercept = 0, color = \"orange\", size = 1) +\n  geom_line(color = \"blue\", size = 1) +\n  geom_point()\n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_vline(xintercept = 7.5, color = \"orange\", size = 1) +\n  geom_line(color = \"blue\", size = 1) +\n  geom_point() \n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_abline(intercept = 4000, slope = 0.5, color = \"orange\", size = 1) +\n  geom_line(color = \"blue\", size = 1) +\n  geom_point() \n```\n:::\n\n\n\n::: footer\n\\[2B\\] Visualize I\n:::\n\n## Working with Color {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   Color scales come in two main types:\n    -   [Discrete]{.b .blue} scales have [separate colors]{.b .green}\n        -   Best with factor variables\n    -   [Continuous]{.b .blue} scales [form a gradient]{.b .green}\n        -   Best with numeric variables\n\n::: {.fragment .mt1}\n-   There are two ways to control color:\n    -   You can [map color]{.b .blue} to a [variable]{.b .green}\n        -   It will take on *different* values\n    -   You can [set color]{.b .blue} to a [value]{.b .green}\n        -   It will take on *one* value only\n:::\n\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n\n{{< li fiivuxdi trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n\n:::\n:::\n\n::: footer\n\\[2B\\] Visualize I\n:::\n\n## Color Live Coding\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nmpg\n\n# ==============================================================================\n\n# USECASE: Continuous color scales work well with numeric variables\n\nggplot(mpg, aes(x = hwy, y = cty, color = displ)) +\n  geom_point(size = 4)\n\nggplot(mpg, aes(x = hwy, y = cty, color = displ)) +\n  geom_point(size = 4) +\n  scale_color_continuous(type = \"viridis\")\n\n# ==============================================================================\n\n# USECASE: Use a discrete color scale with categorical variables\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point()\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  scale_color_discrete(\n    name = \"Drivetrain\", \n    breaks = c(\"4\", \"f\", \"r\"), \n    labels = c(\"Four Wheel\", \"Front Wheel\", \"Rear Wheel\")\n  )\n\n# ==============================================================================\n\n# PITFALL: Don't forget to set categorical variables as factors\n\nggplot(mpg, aes(x = displ, y = hwy, color = cyl)) + \n  geom_point() # R guesses you want a continuous scale\n\nggplot(mpg, aes(x = displ, y = hwy, color = factor(cyl))) + \n  geom_point() + \n  scale_color_discrete(name = \"Cylinders\")\n\n# ==============================================================================\n\n# LESSON: Set a geom's color aesthetic to make it always that color\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(color = \"red\")\n\n# ==============================================================================\n\n# PITFALL: However, do this inside of geom() not aes()\n\nggplot(mpg, aes(x = displ, y = hwy, color = \"blue\")) + \n  geom_point() #unintended\n\n# ==============================================================================\n\n# LESSON: If you both set and map color, the setting will win\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) + \n  geom_point(color = \"blue\") \n```\n:::\n\n\n\n::: footer\n\\[2B\\] Visualize II\n:::\n\n## Themes {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Themes]{.b .blue} control how non-data elements look\n    -   e.g., how thick to draw the gridlines\n    -   e.g., where to position the legend\n\n::: {.fragment .mt1}\n-   [Complete themes]{.b .green} change many elements at once\n    -   Some are built into ggplot2\n    -   Others come in R packages\n    -   \\{papaja\\} provides `theme_apa()`\n:::\n\n::: {.fragment .mt1}\n-   [Individual elements]{.b .green} can be customized too\n    -   To do so, use `theme()` and [this reference](https://ggplot2.tidyverse.org/reference/element.html)\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n\n{{< li hbkyydsg trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n\n:::\n:::\n\n::: footer\n\\[2B\\] Visualize II\n:::\n\n## Themes Live Coding\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example graphic\n\nlibrary(tidyverse)\n\np <- \n  ggplot(mpg, aes(x = displ, y = hwy, color = drv)) + \n  geom_point() +\n  labs(title = \"Fuel Efficiency\")\np\n\n# ==============================================================================\n\n# USECASE: Apply a \"complete\" theme\n\np + theme_bw()\n\np + theme_classic()\n\np + theme_dark()\n\n# ==============================================================================\n\n# LESSON: More more precise control, we can use theme()\n\np + theme(legend.position = \"top\")\n\np + theme(plot.title = element_text(color = \"purple\", face = \"bold\"))\n\np + theme(panel.grid = element_blank())\n\n# NOTE: There are a lot of elements to learn, so use a cheatsheet!\n```\n:::\n\n\n\n::: footer\n\\[2B\\] Visualize II\n:::\n\n## Exporting Graphics {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   We may need to [export graphics]{.b .blue} from R\n    -   e.g., for a paper, poster, or presentation\n\n::: {.fragment .mt1}\n-   This job is handling fantastically by `ggsave()`\n    -   We can create many types of files\n    -   We can customize the exact size\n:::\n\n::: {.fragment .mt1}\n-   I recommend `.png` for most daily purposes\n    -   For publishing, I prefer `.pdf` or `.svg`\n    -   They retain perfect quality at any zoom\n    -   You can send these files to most publishers\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n\n{{< li amfaktum trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n\n:::\n:::\n\n::: footer\n\\[2B\\] Visualize II\n:::\n\n## Exporting Live Coding\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example graphic\n\nlibrary(tidyverse)\n\np <- ggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point() + geom_smooth() +\n  labs(x = \"Engine Displacement\", y = \"Highway MPG\")\np\n\n# ==============================================================================\n\n# USECASE: Save a specific ggplot object to a file\n\nggsave(filename = \"pfinal.png\", plot = p)\n\n# ==============================================================================\n\n# LESSON: Specify the size of the file to create\n\nggsave(filename = \"pfinal2.png\", plot = p, \n       width = 6, height = 3, units = \"in\")\n\n# ==============================================================================\n\n# LESSON: Just change the extension to create a different file type\n\nggsave(filename = \"pfinal2.pdf\", plot = p, \n       width = 6, height = 3, units = \"in\")\n\n# ==============================================================================\n\n# PITFALL: Creating a very large file may lead to small text\n\nggsave(filename = \"p_poster.png\", plot = p, \n       width = 12, height = 8, units = \"in\")\n\n# ==============================================================================\n\n# TIP: You can quickly increase the text size using base_size\n\np2 <- p + theme_grey(base_size = 24)\n\nggsave(filename = \"p_poster2.png\", plot = p2,\n       width = 12, height = 8, units = \"in\")\n```\n:::\n\n\n\n::: footer\n\\[2B\\] Visualize II\n:::\n\n<!-- Practice IV -->\n\n# [Practice IV](https://pittmethods.github.io/r4ss/Day_2/Day2B_Practice.html){preview-link=\"false\"}\n",
    "supporting": [
      "slide_ggplot2x_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}