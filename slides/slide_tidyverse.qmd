---
format: 
  revealjs:
    css: ../styles.css
    slide-number: true
    show-slide-number: all
    preview-links: auto
    self-contained: true
    progress: true
    history: true
    hash-type: number
    theme: default
    code-block-background: true
    highlight-style: zenburn
    code-link: false
    code-copy: true
    pagetitle: "Dados e R"
    author-meta: "Henrique Costa"
    date-meta: "2024-08-19"
---

::: {.my-title}
# [Dados e R]{.blue} <br />Data Wrangling & DataViz

::: {.my-grey}
[Encontro 2 | 19/08/20024]{}<br />
[Henrique Costa | Métodos Estratégicos em FinQuant]{}
:::

<!-- ![](../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400} -->
:::

<!-- Program II -->

# Dados e R

## Funções {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   [Receitas]{.b .green} permitem que os chefs preparem guloseimas saborosas
    -   As receitas pedem ingredientes
    -   Recipes involve one or more steps
    -   As etapas transformam os ingredientes em guloseimas

::: {.fragment .mt1}
-   [Funções]{.b .blue} são como receitas *personalizáveis*
    -   Funções solicitam entradas ("argumentos")
    -   As funções envolvem uma ou mais linhas de código
    -   O código transforma entradas em saídas
    -   O uso de funções requer parênteses (geralmente)
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li vpqdjfdy trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}

::: {.fragment}
`doce <- f(ing1, ing2)`
:::
:::
:::

::: footer

:::

## Funções - Prática

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

# CASO DE USO: A função pode executar uma tarefa de forma mais fácil e legível

# MODELO: saída <- nome_da_função(entrada)

9 ^ (1 / 2)

x <- sqrt(9)
x

# ==============================================================================

# LIÇÃO: Também podemos usar funções para transformar objetos

y <- 9

sqrt(y)

# ==============================================================================

# LIÇÃO: Podemos até usar funções para transformar o resultado dos cálculos

2 / 3

round(2 / 3)

# ==============================================================================

# LIÇÃO: Podemos personalizar o que uma função faz usando argumentos

# MODELO: saída <- nome_da_função(argumento, nome_do_argumento = valor_do_argumento)


round(2 / 3, digits = 2)

round(2 / 3, digits = 3)

# ==============================================================================

# LIÇÃO: Alguns argumentos são opcionais porque têm valores padrão

round(2 / 3) # the default value for digits is 0

round(2 / 3, digits = 0)
```

::: footer

:::


## Vectores {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   [Vetores]{.b .blue} combinam objetos semelhantes em uma coleção
    -   *Gosto de imaginar um trem puxando vários vagões*
    -   Um vetor é um objeto com muitos subobjetos
    -   Nós nos referimos a cada subobjeto como um [elemento]{.b .green}

::: {.fragment .mt1}
-   Algumas funções [transformam cada elemento]{.b .green} um de cada vez
    -   *Dobrar a quantidade de carga em cada vagão*
:::

::: {.fragment .mt1}
-   Algumas funções [resumir em todos os elementos]{.b .green}
    -   *Calcule a carga total em todos os vagões do trem*
:::
:::

::: {.column .tc .pv5 width="40%"}
<br />
    ![](../img/traincar.png)

::: {.fragment}
`v <- c(1, 2, 3, 4, 5)`
:::

:::
:::

::: footer

:::

## Vetores - Prática

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# LIÇÃO: Podemos combinar vários elementos em um vetor

# MODELO: nome_do_vetor <- c(elemento1, elemento2, elemento3)

x <- 4 9 16 25 # error

x <- c(4, 9, 16, 25)
x

y <- c(2, 3)
y

# ==============================================================================

# LIÇÃO: Também podemos combinar vários vetores e elementos

c(x, y)

c(x, y, 20)

# ==============================================================================

# CASO DE USO: Operadores matemáticos transformarão cada elemento individualmente

x + 1

x * 3

x # mas, novamente, isso não será salvo a menos que você use atribuição

# ==============================================================================

# CASO DE USO: Algumas funções também transformarão cada elemento individualmente

sqrt(x)

log(x)

# ==============================================================================

# CASO DE USO: Outras funções resumirão o vetor com um único número

length(x)

sum(x)

mean(x)
```

::: footer

:::

<!-- Insert quiz and short break here? -->

## Strings {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   Ao programar com R, precisamos de uma maneira de distinguir
    -   Nomes de objetos/funções (por exemplo, a função *mean*)
    -   Dados de texto/caractere (por exemplo, a palavra *mean*)
    
::: {.fragment .mt1}
-   [Strings]{.b .blue} são a maneira do R armazenar dados de texto
    -   Strings podem armazenar qualquer caractere (sem regras!)
    -   As strings são criadas e exibidas com [quotes]{.b .green}
:::

:::

::: {.column .tc .pv5 width="40%"}
{{< li xqnbvely trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}


:::
:::

::::

<!-- Insert quiz and short break here? -->

## Strings {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}

::: {.fragment .mt1}
-   R tem ótimas ferramentas para trabalhar com strings
    -   As strings podem ser coletadas em vetores
    -   Funções especiais podem transformar strings
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li xqnbvely trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}

::: {.fragment}
`name <- "John Doe"`
:::

:::
:::

:::

## Strings - Prática

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# CASO DE USO: Strings são a principal maneira de armazenar dados de caracteres em R
 
my_color <- red # error

my_color <- "red" # correto

# ==============================================================================

# CASO DE USO: Strings também podem armazenar símbolos não permitidos em nomes de objetos

dye <- "red#40"
dye

dyes <- c("red#40", "blue#02")
dyes

# ==============================================================================

# ARMADILHA: Muitas operações que você pode fazer com números não funcionarão para strings

dyes + 1 # error

mean(dyes) # error

# ==============================================================================

# CASO DE USO: Mas outras operações funcionam para ambos ou mesmo apenas para strings

length(dyes)

nchar(dyes)

dyes2 <- toupper(dyes)
dyes2
```

::: footer

:::

## Packages (Pacotes) {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   [Livros de receitas]{.b .green} são uma ótima maneira de aprender a cozinhar
    -   *Eles contêm muitas receitas e instruções*
    -   Navegue em uma **livraria** online para encontrar um livro de receitas
    -   **Encomende** para adicionar à sua **estante** pessoal
    -   Para usar, **retire** o livro de receitas da prateleira


:::

::: {.column .tc .pv5 width="40%"}
{{< li tboujdsn trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}


:::
:::


## Packages (Pacotes) {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}

::: {.fragment .mt1}
-   [Pacotes]{.b .blue} são como livros de receitas para R
    -   *Eles contêm funções e conjuntos de dados úteis*
    -   Navegue em um **repositório** online para um pacote
    -   **Instale** para adicioná-lo à sua **biblioteca** pessoal
    -   Para usar, **carregue** o pacote da biblioteca
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li tboujdsn trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}

::: {.fragment}
`library("pkg_name")`
:::
:::
:::

::: footer

:::

## Packages - Prática

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# CASO DE USO: O pacote stringr adiciona uma função para corrigir a capitalização

students <- c("mary anne", "BENjamin", "Lee")

# ==============================================================================

# ARMADILHA: Mas não podemos usar essa função sem instalar o pacote

str_to_title(students) # error

# ==============================================================================

# LIÇÃO: Instalando um pacote usando RStudio

# - RStudio > Extras pane > Packages tab > Install button

# ==============================================================================

# ARMADILHA: Também precisamos carregar o pacote antes de podermos usá-lo

str_to_title(students) # error

# ==============================================================================

# LIÇÃO: Carregamos o pacote usando library()

library("stringr")
str_to_title(students) # pronto isso funciona!

# ==============================================================================

# LIÇÃO: Também podemos manter nossos pacotes atualizados usando o RStudio

# RStudio > Extras pane > Packages tab > Update button
```

::: footer

:::

<!-- Wrangle I -->

# Wrangle I

## Princípio de Dados Tidy (Arrumados) {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
- Existem muitas maneiras de armazenar dados

::: {.fragment .mt1}
- Aprenderemos o formato [tidy data]{.b .blue}
    - Os dados devem ser *retangulares*
    - Cada [variável]{.green} tem sua própria coluna
    - Cada [observação]{.green} tem sua própria linha
    - Cada [valor]{.verde} tem sua própria célula
:::

::: {.fragment .mt1}
![](../img/tidydata.png)
:::

:::

::: {.column .tc .pv5 width="40%"}
{{< li qhdmndwt trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer

:::

## Outros conselhos sobre dados {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   [Nomeie todas as variáveis]{.b .blue} na primeira linha
    -   Isso é chamado de [linha de cabeçalho]{.b .green}
    
::: {.fragment .mt1}
-   [Evite células mescladas]{.b .blue} para armazenamento de dados
    -   Estes são bons para comunicação
:::

::: {.fragment .mt1}
-   [Evite células vazias]{.b .blue} sempre que possível
    -   Marcar [dados ausentes]{.b .green} como `NA`
:::

::: {.fragment .mt1}
-   [Evite formatação como dados]{.b .blue} para armazenamento
    -   por exemplo, codificação de cores não redundante
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li dizvjgip trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer

:::

## Arrumando (*Tidying*) exemplo 1 {.smaller}

::: {.columns .pv4}
::: {.column width="45%"}
#### Não Arrumado (Tidy)
<table class="table-bad" width="100%">
  <tbody>
  <tr>
    <td>Nome</td>
    <td>Ann</td>
    <td>Bob</td>
    <td>Cat</td>
    <td>Dom</td>
  </tr>
  <tr>
    <td>Idade</td>
    <td>13</td>
    <td>10</td>
    <td>11</td>
    <td>11</td>
  </tr>
  <tr>
    <td>Peso</td>
    <td>56.4</td>
    <td>46.8</td>
    <td>41.3</td>
    <td>43.3</td>
  </tr>
  </tbody>
</table>

::: {.fragment .mt1 .pv4}
❌ Aqui, cada linha é uma variável e cada coluna é uma observação.
:::
:::

::: {.column width="10%"}
:::

::: {.column width="45%"}
::: {.fragment}
#### Arrumado (*Tidy*)
<table class="table-good" width="100%">
  <tbody>
  <tr>
    <td>Nome</td>
    <td>Idade</td>
    <td>Peso</td>
  </tr>
  <tr>
    <td>Ann</td>
    <td>13</td>
    <td>56.4</td>
  </tr>
  <tr>
    <td>Bob</td>
    <td>10</td>
    <td>46.8</td>
  </tr>
  <tr>
    <td>Cat</td>
    <td>11</td>
    <td>41.3</td>
  </tr>
  <tr>
    <td>Dom</td>
    <td>11</td>
    <td>43.3</td>
  </tr>
  </tbody>
</table>
::: {.pv4}
✔️ Aqui, cada coluna é uma variável e cada linha é uma observação.
:::
:::
:::
:::

::: footer

:::

## Arrumando (*Tidying*) exemplo 2 {.smaller}

::: {.columns .pv4}
::: {.column width="45%"}
#### Não arrumado (*Tidy*)
<table class="table-bad" width="100%">
  <tbody>
  <tr>
    <td>Nome:</td>
    <td>Ann</td>
    <td>Bob</td>
    <td>Cat</td>
    <td>Dom</td>
  </tr>
  <tr>
    <td>Idade</td>
    <td>Peso</td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>13</td>
    <td>56.4</td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>10</td>
    <td>46.8</td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>11</td>
    <td>41.3</td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>11</td>
    <td>43.3</td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  </tbody>
</table>

::: {.fragment .mt1 .pv4}
❌ Aqui, temos dados que não são retangulares porque a variável Names tem sua própria linha.
:::
:::

::: {.column width="10%"}
:::

::: {.column width="45%"}
::: {.fragment}
#### Arrumado (*Tidy*)
<table class="table-good" width="100%">
  <tbody>
  <tr>
    <td>Nome</td>
    <td>Idade</td>
    <td>Peso</td>
  </tr>
  <tr>
    <td>Ann</td>
    <td>13</td>
    <td>56.4</td>
  </tr>
  <tr>
    <td>Bob</td>
    <td>10</td>
    <td>46.8</td>
  </tr>
  <tr>
    <td>Cat</td>
    <td>11</td>
    <td>41.3</td>
  </tr>
  <tr>
    <td>Dom</td>
    <td>11</td>
    <td>43.3</td>
  </tr>
  </tbody>
</table>

::: {.pv4}
✔️ Aqui, tornamos os dados retangulares movendo a variável Nomes para sua própria coluna.
:::
:::
:::
:::

::: footer

:::

## Arrumando (*Tidying*) exemplo 3 {.smaller}

::: {.columns .pv4}
::: {.column width="45%"}
#### Não arrumado (*Tidy*)
<table class="table-bad table-small" width="100%">
  <tbody>
  <tr>
    <td>country</td>
    <td>year</td>
    <td>cases / population</td>
  </tr>
  <tr>
    <td rowspan=2>Afghanistan</td>
    <td>1999</td>
    <td>NA / 19987071</td>
  </tr>
  <tr>
    <td>2000</td>
    <td>2666 / 20595360</td>
  </tr>
  <tr>
    <td rowspan=2>Brazil</td>
    <td>1999</td>
    <td>37737 / 172006362</td>
  </tr>
  <tr>
    <td>2000</td>
    <td>80488 / 174504898</td>
  </tr>
  <tr>
    <td rowspan=2>China</td>
    <td>1999</td>
    <td>212258 / 1272915272</td>
  </tr>
  <tr>
    <td>2000</td>
    <td>213766 / 1280428583</td>
  </tr>
  </tbody>
</table>

::: {.fragment .mt1 .pv4}
❌ Aqui, mesclamos células e dois valores armazenados em uma única célula.
:::
:::

::: {.column width="10%"}
:::

::: {.column width="45%"}
::: {.fragment}
#### Arrumado (*Tidy*)
<table class="table-good table-small" width="100%">
  <tbody>
  <tr>
    <td>country</td>
    <td>year</td>
    <td>cases</td>
    <td>population</td>
  </tr>
  <tr>
    <td>Afghanistan</td>
    <td>1999</td>
    <td>NA</td>
    <td>19987071</td>
  </tr>
  <tr>
    <td>Afghanistan</td>
    <td>2000</td>
    <td>2666</td>
    <td>20595360</td>
  </tr>
  <tr>
    <td>Brazil</td>
    <td>1999</td>
    <td>37737</td>
    <td>172006362</td>
  </tr>
  <tr>
    <td>Brazil</td>
    <td>2000</td>
    <td>80488</td>
    <td>174504898</td>
  </tr>
  <tr>
    <td>China</td>
    <td>1999</td>
    <td>212258</td>
    <td>1272915272</td>
  </tr>
  <tr>
    <td>China</td>
    <td>2000</td>
    <td>213766</td>
    <td>1280428583</td>
  </tr>
  </tbody>
</table>
::: {.pv4}
✔️Aqui, desfazemos a mesclagem dos países e separamos as variáveis de casos e populações em colunas.
:::
:::
:::
:::

::: footer

:::


## Arrumando (*Tidying*) exemplo 4 {.smaller}

::: {.columns .pv4}
::: {.column width="45%"}
#### Não arrumado
<table class="table-bad" width="100%">
  <tbody>
  <tr>
    <td>student</td>
    <td>grade</td>
    <td></td>
  </tr>
  <tr>
    <td>[Amber]{.bg-yellow}</td>
    <td>91.5</td>
    <td>A-</td>
  </tr>
  <tr>
    <td>[Bristol]{.bg-teal}</td>
    <td>86.2</td>
    <td>B</td>
  </tr>
  <tr>
    <td>[Charlene]{.bg-yellow}</td>
    <td>94.0</td>
    <td>A</td>
  </tr>
  <tr>
    <td>Diego</td>
    <td>89.3</td>
    <td>B+</td>
  </tr>
  <tr>
    <td colspan=3>Legend: [Psych. Major]{.bg-yellow}, [Psych. Minor]{.bg-teal}</td>
  </tr>
  </tbody>
</table>

::: {.fragment .mt1 .pv4}
❌ Aqui, temos um nome de variável ausente e formatação como dados.
:::
:::

::: {.column width="10%"}
:::

::: {.column width="45%"}
::: {.fragment}
#### Arrumado
<table class="table-good" width="100%">
  <tbody>
  <tr>
    <td>student</td>
    <td>psych</td>
    <td>grade</td>
    <td>letter</td>
  </tr>
  <tr>
    <td>Amber</td>
    <td>major</td>
    <td>91.5</td>
    <td>A-</td>
  </tr>
  <tr>
    <td>Bristol</td>
    <td>minor</td>
    <td>86.2</td>
    <td>B</td>
  </tr>
  <tr>
    <td>Charlene</td>
    <td>major</td>
    <td>94.0</td>
    <td>A</td>
  </tr>
  <tr>
    <td>Diego</td>
    <td>NA</td>
    <td>89.3</td>
    <td>B+</td>
  </tr>
  </tbody>
</table>
::: {.pv4}
✔️ Aqui, adicionamos uma coluna para a variável psych, removemos a legenda e nomeamos a variável letter.
:::
:::
:::
:::

::: footer

:::


## Arrumando (*Tidying*) exemplo 5 {.smaller}

::: {.columns .pv4}
::: {.column width="45%"}
#### Não arrumado
<table class="table-bad" width="100%">
  <tbody>
  <tr>
    <td>student</td>
    <td>grade</td>
    <td>letter</td>
  </tr>
  <tr>
    <td>Amber</td>
    <td>91.5</td>
    <td>A-</td>
  </tr>
  <tr>
    <td>Bristol*</td>
    <td>94.2</td>
    <td>A</td>
  </tr>
  <tr>
    <td colspan=3>Class Summary</td>
  </tr>
  <tr>
    <td>As</td>
    <td>2</td>
    <td>Yay!</td>
  </tr>
  <tr>
    <td>Bs</td>
    <td>0</td>
    <td></td>
  </tr>
  <tr>
    <td colspan=3 class="tr">*Grade was revised.</td>
  </tr>
  </tbody>
</table>

::: {.fragment .mt1 .pv4}
❌ Aqui, temos dois tipos de dados em um arquivo e uma nota de rodapé como dados.
:::
:::

::: {.column width="10%"}
:::

::: {.column width="45%"}
::: {.fragment}
#### Arrumado
<table class="table-good" width="100%">
  <tbody>
    <tr>
      <td>student</td>
      <td>grade</td>
      <td>letter</td>
      <td>revised</td>
    </tr>
    <tr>
      <td>Amber</td>
      <td>91.5</td>
      <td>A-</td>
      <td>FALSE</td>
    </tr>
    <tr>
      <td>Bristol</td>
      <td>94.2</td>
      <td>A</td>
      <td>TRUE</td>
    </tr>
  </tbody>
</table>

<table class="table-good" width="100%" style="margin-top: 1em;">
  <tbody>
    <tr>
      <td>letter</td>
      <td>count</td>
      <td>notes</td>
    </tr>
    <tr>
      <td>A</td>
      <td>2</td>
      <td>Yay!</td>
    </tr>
    <tr>
      <td>B</td>
      <td>0</td>
      <td></td>
    </tr>
  </tbody>
</table>

::: {.pv4}
✔️ Aqui, dividimos os dados em duas tabelas separadas e adicionamos as variáveis revisadas e notas.
:::
:::
:::
:::

::: footer

:::



## Tabelas (Tibbles) {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   R funciona particularmente bem com [dados organizados]{.b .green}

::: {.fragment .mt1}
-   Armazenamos dados organizados em [data frames]{.b .green} ou [tibbles]{.b .blue}
    -   Tibbles são apenas tabelas mais sofisticadas<br />
        (ou seja, eles têm alguns recursos extras)
:::

::: {.fragment .mt1}
-   Para usar tibbles, precisamos do pacote [tidyverse]{.b .blue}
:::

::: {.fragment .mt1}
-   Tibbles são construídos a partir de um ou mais vetores
    -   Os vetores devem ter o [mesmo comprimento]{.b .green}
    -   Eles podem conter [diferentes tipos]{.b .green} de dados
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li jiievwhv trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer

:::

## Vetores {.smaller}

![](../img/vectors.png)

::: {.tc .pv4}
Começamos com três objetos vetoriais separados que têm todos o mesmo comprimento.

Nós configuramos para que o $n$-ésimo vagão em cada trem corresponda à mesma observação.
:::

::: footer

:::

## Tibble {.smaller}

![](../img/tibble.png)

::: {.tc .pv4}
Então combinamos os vetores em um único objeto tibble (ou data frame).

Agora, conforme o tibble se move, as variáveis sempre ficam juntas.
:::

::: footer

:::

## Tibbles - Prática

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# CONFIGURAÇÃO: Instale e carregue o pacote tidyverse

# Extras pane > Packages tab > Install

library(tidyverse)

# ==============================================================================

# LIÇÃO: Crie um tibble a partir de vetores

x <- c(10, 20, 30, 40)
x

y <- x * 2 - 4
y

my_tibble <- tibble(x, y)
my_tibble

# ==============================================================================

# CASO DE USO: Você pode misturar diferentes tipos de vetores em um único tibble

first_names <- c("Adam", "Billy", "Caitlyn", "Debra")

age_years <- c(12, 13, 10, NA)

guests <- tibble(first_names, age_years)
guests

# ==============================================================================

# DICA: Para economizar tempo, você também pode criar os vetores na chamada tibble

gradebook <- tibble(
  grade = c(95, 83, 90, 76),
  letter = c("a", "b", "a-", "c")
)
gradebook

# ==============================================================================

# ARMADILHA: Não tente combinar tibbles com comprimentos diferentes

y <- c(1, 2, 3)
x <- c("a", "b")

tibble(y, x) #error

# ==============================================================================

# LIÇÃO: No entanto, a exceção é que R irá "reciclar" um único valor

tibble(y, x = "a")

# ==============================================================================

# LIÇÃO: Você pode "extrair" um vetor de um tibble usando $

mytibble <- tibble(x = c(1, 2, 3, 4, 5), y = "test")

mytibble$x

mytibble$y

# ==============================================================================

# ARMADILHA: Não tente extrair um vetor que não existe

mytibble$z #error
```

::: footer

:::


## Tabelas longas e largas (long x wide) {.smaller}

![](../img/original-dfs-tidy.png){fig-align="center"}


::: footer

:::



## Tabelas longas e largas (long x wide) {.smaller}

![](../img/tidyr-longer-wider.gif){fig-align="center"}


::: footer

:::




## Importação e Exportação {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   Os dados geralmente são armazenados em [arquivos de dados]{.b .green}
    -   Importar arquivos para R é chamado [reading]{.b .blue}
    -   Exportar arquivos de R é chamado [writing]{.b .blue}

::: {.fragment .mt1}
-   Um tipo de arquivo de dados conveniente é um CSV
    -   Isto significa [valores separados por vírgula]{.b .green}
    -   Um arquivo CSV é fácil de compartilhar com outras pessoas
:::

::: {.fragment .mt1}
-   O pacote [tidyverse]{.b .green} pode ler/escrever CSVs
    -   Outros pacotes podem ler/escrever outros tipos
        (e.g., *readxl*, *haven*, *rio*, *googlesheets4*)
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li dhkykqke trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer

:::

## Read/Write - Prática

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# CONFIGURAÇÃO: Carregue o pacote tidyverse (se ainda não o fez)

library(tidyverse)

# ==============================================================================

# CASO DE USO: Crie um tibble e grave-o em um arquivo

gradebook <- tibble(
  id = c(123, 456, 789),
  grade = c("A", "B", "A")
)
gradebook

write_csv(gradebook, file = "gradebook.csv")

# NOTA: Você pode ver o novo arquivo no painel Extras > aba Arquivos.
# Você pode abrir o arquivo em outro programa (por exemplo, Microsoft Excel).
# Você também pode enviar este arquivo por e-mail para outra pessoa para compartilhá-lo.

# ==============================================================================

# ARMADILHA: Não troque a ordem do tibble e do file

write_csv("gradebook.csv", gradebook) # error

# ==============================================================================

# CASO DE USO: Ler em um arquivo contendo dados

old_gradebook <- read_csv("gradebook.csv")
old_gradebook

# NOTA: read_csv() examinará e adivinhará o tipo de dado de cada variável.
# Você pode dizer a ele o tipo de dado de cada variável, mas isso é mais avançado.

# ==============================================================================

# ARMADILHA: Não use as funções read.csv() e write.csv()

old_gradebook <- read.csv("gradebook.csv") # not a tibble
old_gradebook
```

::: footer

:::

<!-- # [Practice II](https://pittmethods.github.io/r4ss/Day_1/Day1B_Practice.html){preview-link="false"} -->


# Wrangle II

## Vérbos basicos em *data wrangling* {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   [tidyverse]{.b .blue} fornece ferramentas para controlar tibbles
    -   Essas funções são nomeadas após *verbos*
    -   Então, se você nomear seus objetos com base em *substantivos*...
    -   ...seu código se torna mais fácil de ler

::: {.fragment .mt1}
| Substantivo(substantivo) ❌        |  Verbo(substantivo) ✔️  | 
|:----------------------|:----------------|
| `blender(fruit)`      | `blend(fruit)`  |
| `screwdriver(screw)`  | `drive(screw)`  |
| `boxcutter(box)`      | `cut(box)`      |

:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li sbiheqdr trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer

:::

## Verbos focados em colunas {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   [Selecionar]{.b .blue} retém apenas certas colunas/variáveis
    -   [`select(TBL, VAR_KEEP, -VAR_DROP)`]{.f3}

::: {.fragment .mt1}
-   [Mutate]{.b .blue} adiciona ou transforma colunas/variáveis
    -   [`mutate(TBL, NEW_VAR = OLD_VAR / 1000)`]{.f3}
:::

::: {.fragment .mt1}
-   [Rename]{.b .green} altera os nomes das colunas/variáveis
    -   [`rename(TBL, NEW_NAME = OLD_NAME)`]{.f3}
:::

::: {.fragment .mt1}
-   [Relocate]{.b .green} altera a ordem das colunas/variáveis
    -   [`relocate(TBL, VAR_MOVE, .after = OTHER_VAR)`]{.f3}
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li ifxlrnhk trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer

:::

## *Select* - Prática

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# CONFIGURAÇÃO: Carregar pacote e inspecionar exemplo tibble

library(tidyverse) # inclui o pacote dplyr
starwars

# ==============================================================================

# CASO DE USO: Reter apenas as variáveis especificadas

sw <- select(starwars, name)
sw
sw <- select(starwars, name, sex, species)
sw

# ==============================================================================

# ARMADILHA: Não esqueça de salvar a alteração com a atribuição

select(starwars, name, sex, species)
starwars # ainda inclui todas as variáveis

# ==============================================================================

# CASO DE USO: Reter todas as variáveis entre duas variáveis

sw <- select(starwars, name, hair_color:eye_color)
sw

# ==============================================================================

# CASO DE USO: Reter todas as variáveis, exceto as especificadas

sw <- select(starwars, -sex, -species)
sw
sw <- select(starwars, -c(sex, species))
sw
sw <- select(starwars, -c(hair_color:starships))
sw
```

::: footer

:::

## *Mutate* - Prática

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# CONFIGURAÇÃO: Criar exemplo tibble

patients <- tibble(
  id = c("S1", "S2", "S3"),
  feet = c(6, 5, 5),
  inches = c(1, 7, 2),
  pounds = c(176.3, 124.9, 162.6)
)
patients

# ==============================================================================

# CASO DE USO: Adicionar uma ou mais variáveis

p2 <- mutate(patients, sex = c("M", "F", "F"))
p2

ages <- c(32, 41, 29)
p2 <- mutate(patients, ages = ages)
p2

p2 <- mutate(
  patients, 
  sex = c("M", "F", "F"), 
  ages = ages
)
p2

# ==============================================================================

# CASO DE USO: Calcular variáveis

p2 <- mutate(patients, height = feet + inches / 12)
p2

p2 <- mutate(patients, ln_pounds = log(pounds))
p2

# ==============================================================================

# CASO DE USO: Substituir variáveis

patients <- mutate(patients, height = height / 3.281)
patients

# ==============================================================================

# CASO DE USO: Variáveis duplicadas

p2 <- mutate(patients, weight = pounds)
p2 # tanto peso quanto libras existem
```

::: footer

:::

## *Rename* / *Relocate* - Prática

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# CASO DE USO: Alterar o nome de uma ou mais variáveis

starwars

sw <- rename(starwars, Character = name)
sw

sw <- rename(starwars, height_cm = height, mass_kg = mass)
sw

# ==============================================================================

# ARMADILHA: Não troque a ordem e tente old_name = new_name

sw <- rename(starwars, name = Character) # error

# ==============================================================================

# CASO DE USO: Mover variáveis antes ou depois de outra variável

starwars

sw <- relocate(starwars, species, sex, .before = height)
sw

sw <- relocate(starwars, species, sex, .after = name)
sw

# ==============================================================================

# ARMADILHA: Não se esqueça do ponto final!

sw <- relocate(starwars, sex, before = height) 
sw # altura foi renomeada acidentalmente para antes

```

::: footer

:::

## Verbos focados em linha {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   [Arrange]{.b .blue} classifica as linhas com base em seus valores
    -   [`arrange(TBL, VAR_SORT_UP)`]{.f3}
    -   [`arrange(TBL, desc(VAR_SORT_DOWN))`]{.f3}
    -   [`arrange(TBL, VAR_SORT_1ST, VAR_SORT_2ND)`]{.f3}

::: {.fragment .mt1}
-   [Filter]{.b .blue} retém certas linhas com base em critérios
    -   [`filter(TBL, DBL_CRIT > 0)`]{.f3}
    -   [`filter(TBL, STR_CRIT == "A")`]{.f3}
    -   [`filter(TBL, CRIT1, CRIT2)`]{.f3}
:::

:::

::: {.column .tc .pv5 width="40%"}
{{< li dlprbpnx trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer

:::


## *Arrange* - Prática

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# CASO DE USO: Classificar observações por uma variável

starwars

sw <- arrange(starwars, height)
sw # classificado por altura, crescente

sw <- arrange(starwars, name)
sw # classificado por nome, em ordem alfabética

# ==============================================================================

# CASO DE USO: Classificar observações por uma variável, em ordem reversa

sw <- arrange(starwars, desc(height))
sw # classificado por altura, decrescente

sw <- arrange(starwars, desc(name))
sw # classificado por nome, em ordem alfabética reversa

# ==============================================================================

# CASO DE USO: Classificar observações por múltiplas variáveis

sw <- arrange(starwars, hair_color, mass)
sw # classificado por cor do cabelo, então os empates são quebrados por massa

```

::: footer

:::

## *Filter* - Prática

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# CASO DE USO: Reter apenas observações que atendem a um critério

sw <- filter(starwars, mass > 100)
sw # apenas observações com massa maior que 100

sw <- filter(starwars, mass <= 100)
sw # apenas observações com massa menor ou igual a 100

sw <- filter(starwars, species == "Human")
sw # apenas observações com espécies iguais ao Humano

sw <- filter(starwars, species != "Human")
sw # apenas observações com espécies diferentes do Humano

# ==============================================================================

# ARMADILHA: Não tente usar um único = para testar igualdade

sw <- filter(starwars, height = 150) # error

sw <- filter(starwars, height == 150) # correct
sw 

# ==============================================================================

# ARMADILHA: Não se esqueça de que R diferencia maiúsculas de minúsculas

sw <- filter(starwars, species == "human")
sw # nenhuma observação restante (porque deveria ser Humano)

# ==============================================================================

# CASO DE USO: Reter apenas observações que atendem a critérios complexos

sw <- filter(starwars, mass > 100 & height > 200)
sw # apenas observações com massa acima de 100 E altura acima de 200

sw <- filter(starwars, height < 100 | hair_color == "none")
sw # somente observações com altura menor que 100 OU hair_color igual a nenhum

# ==============================================================================

# ARMADILHA: Não se esqueça de preencher as duas condições

sw <- filter(starwars, mass > 100 & < 200) # error

sw <- filter(starwars, mass > 100 & mass < 200) # correto
sw

# ==============================================================================

# ARMADILHA: Não tente igualar uma string a um vetor

sw <- filter(starwars, species == c("Human", "Droid")) # error

sw <- filter(starwars, species %in% c("Human", "Droid")) # correct
sw
```

::: footer

:::

## *Filter* Cheatsheet {.smaller}

::: {.columns .pv4}
::: {.column width="60%" .mytable}

| Symbol | Description            | Num | Chr   |
|--------|------------------------|-----|-------|
| `<`    | Menor que              | Yes | *No*  |
| `<=`   | Menor ou igual á       | Yes | *No*  |
| `>`    | Maior que              | Yes | *No*  |
| `>=`   | Maior ou igual á       | Yes | *No*  |
| `==`   | Igual á                | Yes | Yes   |
| `!=`   | diferente de           | Yes | Yes   |
| `%in%` | Encontre em            | Yes | Yes   |
| `&`    | Lógico - "E"           | Yes | Yes   |
| `|`    | Lógico - "Ou"          | Yes | Yes   |

:::

::: {.column .tc .pv5 width="40%"}
{{< li esixrdij trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer

:::

<!-- Program III -->

# `Wrangle III`

## `Pipes & Pipelines` {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
- How can we do [multiple operations]{.b .green} to an object?
    1. `x <- 10`
    2. `x2 <- sqrt(x)`
    3. `x3 <- round(x2)`
    
::: {.fragment .mt1}
- This works but is **cumbersome** and **error-prone**
:::

::: {.fragment .mt1}
- A better approach is to use [pipes]{.b .blue} and [pipelines]{.b .green}
    - `x3 <- 10 |> sqrt() |> round()`
:::

::: {.fragment .mt1}
- I like to read `|>` as "and then..."
    - "Take 10 and then sqrt() and then round()"
:::
    
:::

::: {.column .tc .pv5 width="40%"}
{{< li mhttdvjl trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer

:::

## Pipes Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# SETUP: Enable the pipe operator shortcut

# Tools > Global Options... > Code tab > Check "Use Native Pipe Operator"

# Type out |> or press Ctrl+Shift+M (Windows) / Cmd+Shift+M (Mac)

# ==============================================================================

# LESSON: The pipe pushes objects to a function as its first argument

# TEMPLATE: x |> function_name() is the same as function_name(x)

x <- 10

y <- sqrt(x)
y

y <- x |> sqrt()
y

# ==============================================================================

# PITFALL: Don't forget to remove the object from the function call

x |> sqrt(x) # wrong

x |> sqrt() # correct

# ==============================================================================

# USECASE: You can still use arguments when piping

z <- round(3.14, digits = 1)
z

z <- 3.14 |> round(digits = 1)
z

# ==============================================================================

# USECASE: Pipes are useful with tibbles and wrangling verbs

starwars

sw <- select(starwars, name, species, height)
sw

sw <- starwars |> select(name, species, height)
sw

# ==============================================================================

# PITFALL: Don't add a pipe without a step after it

sw <- starwars |> select(name, species, height) |> # error
```

::: footer

:::

## Pipelines Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# USECASE: You can chain multiple pipes together to make a pipeline

x <- 10 |> sqrt() |> round()
x

# ==============================================================================

# TIP: If you want to see the output of a pipeline, you can pipe to print()

x <- 10 |> sqrt() |> round() |> print()

# ==============================================================================

# TIP: To make your pipelines more readable, move each step to a new line

x <- 
  10 |> 
  sqrt() |> 
  round() |>
  print()

# ==============================================================================

# PITFALL: Don't put the pipe at the beginning of a line, though

x <- 
  10 
  |> sqrt()
  |> round()
  |> print() # error

# ==============================================================================

# USECASE: Chain together a series of verbs to flexibly wrangle data

tallones <- 
  starwars |> 
  select(name, species, height) |> 
  rename(height_cm = height) |> 
  mutate(height_ft = height_cm / 30.48) |>  
  filter(height_ft > 7) |> 
  arrange(desc(height_ft)) |>  
  print()
```

::: footer

:::

## Factors {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   [Factors]{.b .blue} are used to represent categorical data
    -   Factors have multiple possible [levels]{.b .blue}
    -   Levels are [discrete]{.b .green} and mutually-exclusive

::: {.fragment .mt1}
-   Sometimes categories are [unordered]{.b .green} (nominal)
    -   Action or Comedy or Drama
    -   Asia or Europe or North America
:::

::: {.fragment .mt1}
-   Sometimes categories are [ordered]{.b .green} (ordinal)
    -   Mild < Medium < Hot
    -   XS < S < M < L < XL
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li cdbgwqyw trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer

:::

## Factors Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# USECASE: Ask 10 kids to order 1: nuggets, 2: pizza, or 3: salad

food <- c(2, 2, 1, 2, 1, 2, 1, 1, 2, 2)
food

# ==============================================================================

# LESSON: We can turn this vector into a factor with factor()

food2 <- factor(food, levels = c(1, 2, 3))
food2

food3 <- factor(food, levels = c(1, 2, 3),
                labels = c("nuggets", "pizza", "salad"))
food3

# ==============================================================================

# USECASE: We can also quickly and easily count each level with table()

table(food3)

# ==============================================================================

# PITFALL: Don't confuse levels and labels

food4 <- factor(food, labels = c(1, 2, 3),
                levels = c("nuggets", "pizza", "salad"))
food4 # full of <NA> because it can't find these levels

# ==============================================================================

# USECASE: You can also just enter strings directly (as self-labels)

genre <- c("pop", "metal", "pop", "rock", "rap", "rap", "pop", "rock")
genre

genre2 <- factor(genre) # observed levels will be assigned alphabetically
genre2

table(genre2)

# ==============================================================================

# LESSON: If ordinal, enter levels low-to-high and add ordered = TRUE

salsa <- c("hot", "mild", "medium", "mild", "medium", "medium")

salsa2 <- factor(salsa, 
                 levels = c("mild", "medium", "hot"), 
                 ordered = TRUE)
salsa2 

# NOTE: We may want to visualize or model ordinal factors differently

# ==============================================================================

# USECASE: Working with factors in a tibble

cereal <- read_csv("cereal.csv")
cereal

cereal2 <- mutate(cereal, mfr = factor(mfr), type = factor(type))
cereal2

table(cereal2$mfr)

table(cereal2$type)
```

::: footer

:::

## Missing Values {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   Sometimes your data will have [missing values]{.b .blue}
    -   Perhaps these were [never collected]{.b .green}
    -   Perhaps the values were [lost/corrupted]{.b .green}
    -   Perhaps the participant [didn't respond]{.b .green}

::: {.fragment .mt1}
-   We need to tell R which values are missing
    -   To do so, we set those values to `NA`
    -   Functions from **tidyverse** make this easy
:::

::: {.fragment .mt1}
-   Missingness is often ["contagious"]{.b .green} in R<br />
    e.g., a vector with `NA` has an unknown mean
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li rwotyanb trigger=loop delay=3000 speed=0.5 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer

:::

## Missing Values Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# SETUP: We will need tidyverse for the read and mutate functions

library(tidyverse)

# ==============================================================================

# PITFALL: Number codes for missingness will mess up calculations in R

heights <- c(149, 158, -999) # here we use -999 to represent a missing value

range(heights)

mean(heights)

log(heights) # our missing value is no longer -999

# ==============================================================================

# USECASE: Use NA for missingness instead

heights2 <- c(149, 158, NA)
heights2

log(heights2) # the NA stayed an NA (due to contagiousness)

# ==============================================================================

# LESSON: Use na.rm = TRUE to do a summary function ignoring the NAs

mean(heights2) # the mean is an NA (due to contagiousness)

mean(heights2, na.rm = TRUE)

range(heights2, na.rm = TRUE)

# ==============================================================================

# USECASE: Dealing with missing values in tibbles

cereal <- read_csv("cereal.csv")

cereal$rating

range(cereal$rating)

# ==============================================================================

# LESSON: Use na_if() to convert specific values to NA while mutating

cereal2 <- mutate(cereal, rating = na_if(rating, -999))

cereal2$rating

range(cereal2$rating, na.rm = TRUE)

# ==============================================================================

# LESSON: Use read_csv(na) to convert specific values to NA while reading

cereal3 <- read_csv("cereal.csv", na = "-999")

cereal3$rating

range(cereal3$rating, na.rm = TRUE)
```

::: footer

:::

<!-- Practice III -->

<!-- # [Practice III](https://pittmethods.github.io/r4ss/Day_2/Day2A_Practice.html){preview-link="false"} -->



# `Wrangle IV`

## Summarize {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   Although we store data about many observations...
-   ...we often want to [summarize across]{.b .blue} observations
    -   This is like [folding]{.b .green} the tibble down to [one row]{.b .green}

::: {.fragment .mt1}
-   We've seen functions that summarize vectors
    -   `length()`, `sum()`, `min()`, `max()`
    -   `mean()`, `median()`, `sd()`, `var()`
:::

::: {.fragment .mt1}
-   `summarize()` lets us use them on tibbles
    -   It works very similarly to `mutate()`
    -   It always creates a tibble as output
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li uhmqrsgl trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer

:::

## Summarize Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# SETUP: We will need tidyverse and an example dataset

library(tidyverse)

sales <- 
  tibble(
    customer = c(1, 2, 3, 1, 3),
    store = c("A", "A", "A", "B", "B"),
    items = c(25, 20, 16, 10, 5),
    spent = c(685, 590, 392, 185, 123)
  ) |> 
  print()

# ==============================================================================

# USECASE: Summarize the typical sales

my_summary <- 
  sales |> 
  summarize(
    avg_items = mean(items),
    avg_spent = mean(spent)
  ) |> 
  print()

# ==============================================================================

# PITFALL: Don't use summary() instead of summarize()

my_summary <- 
  sales |> 
  summary(
    avg_items = mean(items),
    avg_spent = mean(spent)
  ) |> 
  print() # not a tibble

# ==============================================================================

# USECASE: Use more than one summary function

my_summary <- 
  sales |> 
  summarize(
    total_items = sum(items),
    total_spent = sum(spent),
    avg_items = mean(items),
    avg_spent = mean(spent)
  ) |> 
  print()

# ==============================================================================

# USECASE: Use counting functions

my_counts <- 
  sales |> 
  summarize(
    n_sales = n(),
    n_customers = n_distinct(customer),
    n_stores = n_distinct(store)
  ) |> 
  print()
```

::: footer

:::

## Group Summarize {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
- We can also summarize a tibble [by group]{.b .blue}
    -   This is like [folding]{.b .green} the tibble multiple times
    -   Specifically, we fold down to [one row per group]{.b .green}

::: {.fragment .mt1}
-   The syntax for summarize is identical
    -   The only difference is to the tibble
    -   We first pass it through `group_by()`
    -   Pipelines make this very easy
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li pmwtbpap trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer

:::

## Group Summarize Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# SETUP: We will need tidyverse and an example dataset

library(tidyverse)

sales <- 
  tibble(
    customer = c(1, 2, 3, 1, 3),
    store = c("A", "A", "A", "B", "B"),
    items = c(25, 20, 16, 10, 5),
    spent = c(685, 590, 392, 185, 123)
  ) |> 
  print()

# ==============================================================================

# LESSON: We pass a tibble through group_by to group it

sales

sales |> group_by(store) # note the display says "grouped"

# ==============================================================================

# USECASE: We can then summarize and get stats per group

sales |> 
  group_by(store) |> 
  summarize(
    customers = n_distinct(customer),
    items_sold = sum(items),
    total_sales = sum(spent),
    avg_items = mean(items),
    avg_spent = mean(spent)
  )

# ==============================================================================

# SETUP: Let's get a larger, more realistic dataset

# Extra pane > Packages tab > Install > nycflights13

library("nycflights13")

flights

# ==============================================================================

# USECASE: Find the carrier with the lowest average delays

flights |> 
  group_by(carrier) |> 
  summarize(m_delay = mean(dep_delay, na.rm = TRUE)) |> 
  arrange(m_delay)

# ==============================================================================

# LESSON: We can also group by multiple variables

# USECASE: Let's find the day of the year with the most flights

flights |> 
  group_by(month, day) |> 
  summarize(n_flights = n()) |> 
  arrange(desc(n_flights))
```

::: footer

:::

<!-- Visualize I -->

# Visualize I

## What is a graphic? {.smaller}

::: {.pv4 .tc}
![](../img/graphics.png)

::: {.fragment}
A [data visualization]{.b .blue} expresses [data]{.b .green} through [visual aesthetics]{.b .green}.
:::
:::

::: footer

:::

## Describing Graphics {.smaller}

::: {.pv4 .tc}

```{r graphics1}
#| layout-ncol: 2
#| fig-height: 8
#| echo: false
#| message: false

library(tidyverse)
mpg2 <- filter(mpg, cyl != 5)

ggplot(mpg2, aes(x = displ, y = hwy)) + 
  geom_point(size = 4) + 
  labs(x = "Engine Size", y = "MPG") + 
  theme_classic(base_size = 36)

ggplot(mpg2, aes(x = factor(cyl), y = hwy)) + 
  stat_summary(geom = "col", fun = mean) + 
  labs(x = "Cylinders", y = "Average MPG") + 
  theme_classic(base_size = 36)
```

::: {.fragment}
Some simple graphics are [easy to describe]{.b .green} and may even have [ready names]{.b .blue}.
:::
:::

::: footer

:::

## Describing Graphics {.smaller}

::: {.pv4 .tc}

```{r graphics2}
#| layout-ncol: 2
#| fig-height: 8
#| echo: false
#| message: false

library(tidyverse)

ggplot(mpg2, aes(x = displ, y = hwy, color = factor(cyl))) + 
  geom_point(size = 4) + 
  geom_smooth(method = "lm", size = 2) +
  labs(x = "Engine Size", y = "MPG", color = "Cylinders") + 
  theme_grey(base_size = 36) +
  theme(legend.position = "top")

ggplot(mpg2, aes(x = "0", y = hwy)) + 
  facet_wrap(~cyl) +
  geom_violin(size = 1) +
  geom_jitter(size = 3) +
  stat_summary(
    geom = "point", 
    fun = mean, 
    size = 12, 
    color = "red", 
    alpha = 0.8
  ) + 
  scale_x_discrete(position = "top") +
  labs(x = "Cylinders", y = "Average MPG") + 
  theme_grey(base_size = 36) +
  theme(
    axis.ticks.x = element_blank(),
    panel.grid.major.x = element_blank(),
    axis.text.x = element_blank()
  )
```

::: {.fragment}
A [grammar of graphics]{.b .blue} will help us describe more [complex]{.b .green} graphics.
:::
:::

::: footer

:::

## The Grammar of Graphics {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   The [grammar of graphics]{.b .blue} is a set of rules for [describing]{.b .green} and [creating]{.b .green} data visualizations

::: {.fragment .mt1}
-   To make our data visual (and therefore put our highly evolved occipital lobes to work)...
    -   We connect [variables]{.b .blue} to [visual qualities]{.b .green}
    -   We represent [observations]{.b .blue} as [visual objects]{.b .green}
:::

::: {.fragment .mt1}
-   This requires some *fundamental* elements
    -   We will first learn about them in lecture
    -   We will then apply them in R using \{ggplot2\}
:::
:::

::: {.column .tc .pv5 width="40%"}
<!-- {{< li ksoxpinm trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}} -->
![](../img/gglayers.png)
:::
:::

::: footer

:::

## Data {.smaller}

::: {.pv4 .tc}

```{r mpg}
#| rows.print: 6

mpg
```

::: {.fragment .mt1}
Graphics require [data]{.b .blue} (e.g., tibbles), which describe [observations]{.b .green} using [variables]{.b .green}.
:::
:::

::: footer

:::

## Aesthetic Mappings {.smaller}

::: {.pv4 .tc}

![](../img/aes.png)

::: {.fragment}
Graphics require [aesthetic mappings]{.b .blue}, which connect [data variables]{.b .green} to [visual qualities]{.b .green}.
:::
:::

::: footer

:::

## Scales {.smaller}

::: {.pv4 .tc}

::: {layout-ncol=2}
![](../img/position.png)

![](../img/otherscale.png)
:::

::: {.fragment .mt1}
Graphics require [scales]{.b .blue}, which connect specific [data *values*]{.b .green} to specific [aesthetic *values*]{.b .green}.
:::
:::

::: footer

:::

## Geometric Objects {.smaller}

::: {.pv4 .tc}

```{r geoms}
#| layout-ncol: 2
#| fig-height: 8
#| echo: false
#| message: false

ggplot(mpg2, aes(x = displ, y = hwy)) + 
  geom_point(size = 4) + 
  labs(x = "Engine Size", y = "MPG") + 
  theme_grey(base_size = 36)

ggplot(mpg2, aes(x = factor(cyl), y = hwy)) + 
  stat_summary(geom = "col", fun = mean) + 
  labs(x = "Cylinders", y = "Average MPG") + 
  theme_grey(base_size = 36)
```

::: {.fragment .mt1}
Graphics require [geometric objects]{.b .blue} (geoms), which [represent the observations]{.b .green}.
:::
:::

::: footer

:::

## ggplot2 Basics {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   The [ggplot2]{.b .blue} package is a part of tidyverse
    -   No need to install or load it separately
    -   It plays nicely with tibbles and wrangling

::: {.fragment .mt1}
-   It implements the [grammar of graphics]{.b .green} in R
    -   The "gg" stands for "grammar of graphics"
    -   Thus, we will need to provide all four elements
:::

::: {.fragment .mt1}
-   We will create a [pseudo-pipeline]{.b .green} of commands
    -   However, we will use `+` rather than `|>`
    -   This is because \{ggplot2\} predates the R pipe
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li gkeohday trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer

:::

## ggplot2 Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# SETUP: We will need tidyverse and an example dataset

library(tidyverse)

mpg

# ==============================================================================

# LESSON: First, set the data to a tibble
p <- ggplot(data = mpg)
p

# ==============================================================================

# LESSON: Next, set the aesthetic mappings with aes()

p <- ggplot(data = mpg, mapping = aes(x = displ, y = hwy))
p

# ==============================================================================

# TIP: You can leave off the optional argument names

p <- ggplot(mpg, aes(x = displ, y = hwy))
p

# ==============================================================================

# LESSON: Next, set the positional scales

p <- ggplot(mpg, aes(x = displ, y = hwy)) +
  scale_x_continuous(
    name = "Engine Size (in liters)", 
    limits = c(1, 7), 
    breaks = 1:7
  ) +
  scale_y_continuous(
    name = "Highway Fuel Efficiency (in miles/gallon)",
    limits = c(10, 50),
    breaks = c(10, 20, 30, 40, 50)
  )
p

# ==============================================================================

# LESSON: Finally, add a point geom

p <- 
  ggplot(mpg, aes(x = displ, y = hwy)) + 
  scale_x_continuous(
    name = "Engine Size (in liters)", 
    limits = c(1, 7), 
    breaks = 1:7
  ) +
  scale_y_continuous(
    name = "Highway Fuel Efficiency (in miles/gallon)",
    limits = c(10, 50),
    breaks = c(10, 20, 30, 40, 50)
  ) +
  geom_point()

# ==============================================================================

# TIP: If you leave off the scales, R will try to guess

p <- ggplot(mpg, aes(x = displ, y = hwy)) + geom_point()
p

# ==============================================================================

# LESSON: We can also customize the geom with arguments

p <- ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point(color = "red", shape = "square", size = 2)
p
```

::: footer

:::

## Basic Layering {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   ggplot2 uses a [layered]{.b .blue} grammar of graphics
    -   We can keep [stacking geoms]{.b .green} on top

::: {.fragment .mt1}
-   Layering adds a lot of possibilities
    -   We can convey [more complex]{.b .green} ideas
    -   We can learn more about our data
:::

::: {.fragment .mt1}
-   But we can still describe these graphics
    -   Just [describe each layer]{.b .green} in turn
    -   And describe the layers' ordering
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li ikwcijxm trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer

:::

## Basic Layering Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# SETUP: We will need tidyverse and an example dataset

library(tidyverse)

mpg

# ==============================================================================

# USECASE: Add a smooth geom (i.e., line of best fit)

ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  geom_smooth()

ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  geom_smooth(method = "lm")

# ==============================================================================

# USECASE: Add a line geom (i.e., connecting points)

economics

ggplot(economics, aes(x = date, y = unemploy)) + 
  geom_point()

ggplot(economics, aes(x = date, y = unemploy)) + 
  geom_point() +
  geom_line(color = "orange", size = 1)

ggplot(economics, aes(x = date, y = unemploy)) + 
  geom_line(color = "orange", size = 1) +
  geom_point()

# ==============================================================================

# USECASE: Add reference line geoms

ggplot(economics, aes(x = date, y = unemploy)) + 
  geom_hline(yintercept = 0, color = "orange", size = 1) +
  geom_line(color = "blue", size = 1) +
  geom_point()

ggplot(economics, aes(x = date, y = unemploy)) + 
  geom_vline(xintercept = 7.5, color = "orange", size = 1) +
  geom_line(color = "blue", size = 1) +
  geom_point() 

ggplot(economics, aes(x = date, y = unemploy)) + 
  geom_abline(intercept = 4000, slope = 0.5, color = "orange", size = 1) +
  geom_line(color = "blue", size = 1) +
  geom_point() 
```

::: footer

:::

## Working with Color {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   Color scales come in two main types:
    -   [Discrete]{.b .blue} scales have [separate colors]{.b .green}
        -   Best with factor variables
    -   [Continuous]{.b .blue} scales [form a gradient]{.b .green}
        -   Best with numeric variables

::: {.fragment .mt1}
-   There are two ways to control color:
    -   You can [map color]{.b .blue} to a [variable]{.b .green}
        -   It will take on *different* values
    -   You can [set color]{.b .blue} to a [value]{.b .green}
        -   It will take on *one* value only
:::

:::

::: {.column .tc .pv5 width="40%"}
{{< li fiivuxdi trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer

:::

## Color Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# SETUP: We will need tidyverse and an example dataset

library(tidyverse)

mpg

# ==============================================================================

# USECASE: Continuous color scales work well with numeric variables

ggplot(mpg, aes(x = hwy, y = cty, color = displ)) +
  geom_point(size = 4)

ggplot(mpg, aes(x = hwy, y = cty, color = displ)) +
  geom_point(size = 4) +
  scale_color_continuous(type = "viridis")

# ==============================================================================

# USECASE: Use a discrete color scale with categorical variables

ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
  geom_point()

ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
  geom_point() +
  scale_color_discrete(
    name = "Drivetrain", 
    breaks = c("4", "f", "r"), 
    labels = c("Four Wheel", "Front Wheel", "Rear Wheel")
  )

# ==============================================================================

# PITFALL: Don't forget to set categorical variables as factors

ggplot(mpg, aes(x = displ, y = hwy, color = cyl)) + 
  geom_point() # R guesses you want a continuous scale

ggplot(mpg, aes(x = displ, y = hwy, color = factor(cyl))) + 
  geom_point() + 
  scale_color_discrete(name = "Cylinders")

# ==============================================================================

# LESSON: Set a geom's color aesthetic to make it always that color

ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(color = "red")

# ==============================================================================

# PITFALL: However, do this inside of geom() not aes()

ggplot(mpg, aes(x = displ, y = hwy, color = "blue")) + 
  geom_point() #unintended

# ==============================================================================

# LESSON: If you both set and map color, the setting will win

ggplot(mpg, aes(x = displ, y = hwy, color = drv)) + 
  geom_point(color = "blue") 
```

::: footer

:::

## Themes {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   [Themes]{.b .blue} control how non-data elements look
    -   e.g., how thick to draw the gridlines
    -   e.g., where to position the legend

::: {.fragment .mt1}
-   [Complete themes]{.b .green} change many elements at once
    -   Some are built into ggplot2
    -   Others come in R packages
    -   \{papaja\} provides `theme_apa()`
:::

::: {.fragment .mt1}
-   [Individual elements]{.b .green} can be customized too
    -   To do so, use `theme()` and [this reference](https://ggplot2.tidyverse.org/reference/element.html)
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li hbkyydsg trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer

:::

## Themes Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# SETUP: We will need tidyverse and an example graphic

library(tidyverse)

p <- 
  ggplot(mpg, aes(x = displ, y = hwy, color = drv)) + 
  geom_point() +
  labs(title = "Fuel Efficiency")
p

# ==============================================================================

# USECASE: Apply a "complete" theme

p + theme_bw()

p + theme_classic()

p + theme_dark()

# ==============================================================================

# LESSON: More more precise control, we can use theme()

p + theme(legend.position = "top")

p + theme(plot.title = element_text(color = "purple", face = "bold"))

p + theme(panel.grid = element_blank())

# NOTE: There are a lot of elements to learn, so use a cheatsheet!
```

::: footer

:::

## Exporting Graphics {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   We may need to [export graphics]{.b .blue} from R
    -   e.g., for a paper, poster, or presentation

::: {.fragment .mt1}
-   This job is handling fantastically by `ggsave()`
    -   We can create many types of files
    -   We can customize the exact size
:::

::: {.fragment .mt1}
-   I recommend `.png` for most daily purposes
    -   For publishing, I prefer `.pdf` or `.svg`
    -   They retain perfect quality at any zoom
    -   You can send these files to most publishers
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li amfaktum trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer

:::

## Exporting Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# SETUP: We will need tidyverse and an example graphic

library(tidyverse)

p <- ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point() + geom_smooth() +
  labs(x = "Engine Displacement", y = "Highway MPG")
p

# ==============================================================================

# USECASE: Save a specific ggplot object to a file

ggsave(filename = "pfinal.png", plot = p)

# ==============================================================================

# LESSON: Specify the size of the file to create

ggsave(filename = "pfinal2.png", plot = p, 
       width = 6, height = 3, units = "in")

# ==============================================================================

# LESSON: Just change the extension to create a different file type

ggsave(filename = "pfinal2.pdf", plot = p, 
       width = 6, height = 3, units = "in")

# ==============================================================================

# PITFALL: Creating a very large file may lead to small text

ggsave(filename = "p_poster.png", plot = p, 
       width = 12, height = 8, units = "in")

# ==============================================================================

# TIP: You can quickly increase the text size using base_size

p2 <- p + theme_grey(base_size = 24)

ggsave(filename = "p_poster2.png", plot = p2,
       width = 12, height = 8, units = "in")
```

::: footer

:::

<!-- Practice IV -->

<!-- # [Practice IV](https://pittmethods.github.io/r4ss/Day_2/Day2B_Practice.html){preview-link="false"} -->

