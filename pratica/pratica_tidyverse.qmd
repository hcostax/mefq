---
title: "Atividade Prática - Tidyverse"
format:
  html:
    df-print: paged
---

![](../img/maintenance_2780E3.svg){.hero}

```{r}
#| echo: false
#| message: false

library(tidyverse)
```

## Pergunta 1.

Carregue o tibble `economics` (incluído em \{tidyverse\}). Em seguida, crie um pipeline para realizar as seguintes etapas de manipulação de dados:

a) Primeiro, no tibble `economics`, renomeie a variável `uempmed` (a duração média do emprego, em semanas) para `duration` e a variável `unemploy` (o número de desempregados, em milhares) para `number`.
b) Em seguida, adicione uma nova variável chamada `rate` que é calculada dividindo `number` (da parte a) por `pop` (a população total, em milhares).
c) Em seguida, remova (ou seja, desmarque) as variáveis ​​`pce`, `pop` e `psavert` do tibble.
d) Em seguida, realoque a variável `rate` para ficar entre as variáveis ​​`date` e `duration`.

<p><details>
<summary>Clique aqui para ver a resposta</summary>
<blockquote>

**Resposta (a)**

```{r}
economics |> 
  rename(duration = uempmed, number = unemploy)
```

**Resposta (b)**

```{r}
economics |> 
  rename(duration = uempmed, number = unemploy) |> 
  mutate(rate = number / pop)
```

**Resposta (c)**

```{r}
economics |> 
  rename(duration = uempmed, number = unemploy) |> 
  mutate(rate = number / pop) |> 
  select(-c(pce, pop, psavert))
```

**Resposta (d)**

```{r}
economics |>
  rename(duration = uempmed, number = unemploy) |> 
  mutate(rate = number / pop) |> 
  select(-c(pce, pop, psavert)) |> 
  relocate(rate, .after = date)
```

</blockquote>
</details></p>

## Pergunta 2.

Baixe o arquivo de dados [cereal](https://mefq.netlify.app/data/cereal.csv) da [página de bases de dados](../Details/datasets.qmd). Copie-o para sua pasta do Projeto e leia-o no R como um tibble. Em seguida, crie um pipeline para produzir uma pequena lista de cereais para eu experimentar. Estou interessado apenas em cereais frios com uma classificação maior que 70. Organize a lista de forma que os cereais com menos calorias sejam exibidos no topo. Por fim, escreva o resultado deste pipeline em um arquivo CSV chamado "cereal_list.csv" (espero que seja ainda mais popular do que a lista de Craig).

<p><details>
<summary>Clique aqui para ver a resposta</summary>
<blockquote>

```{r}
#| eval: false
#| message: false

cereal <- read_csv("cereal.csv") 

cereal_list <- 
  cereal |> 
  filter(type == "cold" & rating > 70) |> 
  arrange(calories)

cereal_list
```

```{r}
#| echo: false
#| message: false

cereal <- read_csv("../data/cereal.csv") 

cereal_list <- 
  cereal |> 
  filter(type == "cold" & rating > 70) |> 
  arrange(calories)

cereal_list
```

```{r}
#| eval: false

write_csv(cereal_list, "cereal_list.csv")
```

</blockquote>
</details></p>

## Pergunta 3

a) Transforme a variável `drv` no tibble `mpg` em um fator onde "4" é rotulado como Tração nas Quatro Rodas, "r" é rotulado como Tração Traseira e "f" é rotulado como Tração Frontal. Salve este tibble atualizado como `mpg2`.

b) Transforme as variáveis ​​`manufacturer` e `model` no tibble `mpg2` para que a primeira letra de cada palavra seja maiúscula. Salve este tibble atualizado como `mpg3`.

<p><details>
<summary>Clique aqui para ver a resposta</summary>
<blockquote>

**Resposta (a)**

```{r}
#| comment: "#>"
#| collapse: true

mpg2 <- 
  mpg |> 
  mutate(
    drv = factor(
      drv, 
      levels = c("4", "r", "f"), 
      labels = c("Tração nas Quatro Rodas", "Tração Traseira", "Tração Frontal")
    )
  )
mpg2
```

**Resposta (b)**

```{r}
#| comment: "#>"
#| collapse: true
#| warning: false

mpg3 <- 
  mpg2 |> 
  mutate(
    manufacturer = str_to_title(manufacturer),
    model = str_to_title(model)
  )
mpg3
```

</blockquote></details></p>

## Recursos

- [R4DS Capítulo 5](https://r4ds.had.co.nz/transform.html) (§5.1–§5.5): Leia mais sobre os verbos básicos de wrangling

- [R4DS Capítulo 18](https://r4ds.had.co.nz/pipes.html): Leia mais sobre pipes e pipelines.

- [R4DS Capítulo 15](https://r4ds.had.co.nz/factors.html): Leia mais sobre como trabalhar com fatores em R

- [Schafer \& Graham (2002)](https://doi.org/10/dsvqnz): Leia mais sobre análise de dados ausentes.


<!-- ### Pipeline -->

<!-- The official theme song of pipelines everywhere... -->

<!-- <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/56SAxtf-RTg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe> -->
